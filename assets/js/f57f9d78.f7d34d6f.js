"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[3277],{9748:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var d=i(4848),n=i(8453);const a={id:"createDynamicMiddleware",title:"createDynamicMiddleware",sidebar_label:"createDynamicMiddleware",hide_title:!0},r="createDynamicMiddleware",c={id:"api/createDynamicMiddleware",title:"createDynamicMiddleware",description:"&nbsp;",source:"@site/docs/api/createDynamicMiddleware.mdx",sourceDirName:"api",slug:"/api/createDynamicMiddleware",permalink:"/redux-toolkit-zh/api/createDynamicMiddleware",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/createDynamicMiddleware.mdx",tags:[],version:"current",frontMatter:{id:"createDynamicMiddleware",title:"createDynamicMiddleware",sidebar_label:"createDynamicMiddleware",hide_title:!0},sidebar:"docs",previous:{title:"createListenerMiddleware",permalink:"/redux-toolkit-zh/api/createListenerMiddleware"},next:{title:"getDefaultEnhancers",permalink:"/redux-toolkit-zh/api/getDefaultEnhancers"}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"Instance Creation",id:"instance-creation",level:2},{value:"Dynamic Middleware Instance",id:"dynamic-middleware-instance",level:2},{value:"<code>middleware</code>",id:"middleware",level:3},{value:"<code>addMiddleware</code>",id:"addmiddleware",level:3},{value:"<code>withMiddleware</code>",id:"withmiddleware",level:3},{value:"React Integration",id:"react-integration",level:2},{value:"<code>createDispatchWithMiddlewareHook</code>",id:"createdispatchwithmiddlewarehook",level:3},{value:"<code>createDispatchWithMiddlewareHookFactory</code>",id:"createdispatchwithmiddlewarehookfactory",level:3}];function o(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.p,{children:"\xa0"}),"\n",(0,d.jsx)(t.h1,{id:"createdynamicmiddleware",children:(0,d.jsx)(t.code,{children:"createDynamicMiddleware"})}),"\n",(0,d.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,d.jsx)(t.p,{children:'A "meta-middleware" that allows adding middleware to the dispatch chain after store initialisation.'}),"\n",(0,d.jsx)(t.h2,{id:"instance-creation",children:"Instance Creation"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"import { createDynamicMiddleware, configureStore } from '@reduxjs/toolkit'\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().prepend(dynamicMiddleware.middleware),\n})\n"})}),"\n",(0,d.jsxs)(t.admonition,{type:"tip",children:[(0,d.jsxs)(t.p,{children:["It's possible to pass two type parameters to ",(0,d.jsx)(t.code,{children:"createDynamicMiddleware"}),", ",(0,d.jsx)(t.code,{children:"State"})," and ",(0,d.jsx)(t.code,{children:"Dispatch"}),"."]}),(0,d.jsx)(t.p,{children:"These are used by methods that receive middleware to ensure that the provided middleware are compatible with the types provided."}),(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"const dynamicMiddleware = createDynamicMiddleware<State, Dispatch>()\n"})}),(0,d.jsx)(t.p,{children:"However, if these values are derived from the store (as they should be), a circular type dependency is formed."}),(0,d.jsxs)(t.p,{children:["As a result, it's better to use the ",(0,d.jsx)(t.code,{children:"withTypes"})," helper attached to ",(0,d.jsx)(t.code,{children:"addMiddleware"}),", ",(0,d.jsx)(t.code,{children:"withMiddleware"})," and ",(0,d.jsx)(t.code,{children:"createDispatchWithMiddlewareHook"}),"."]}),(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"import { createDynamicMiddleware } from '@reduxjs/toolkit/react'\nimport type { RootState, AppDispatch } from './store'\n\nconst dynamicMiddleware = createDynamicMiddleware()\n\nconst {\n  middleware,\n  addMiddleware,\n  withMiddleware,\n  createDispatchWithMiddlewareHook,\n} = dynamicMiddleware\n\ninterface MiddlewareApiConfig {\n  state: RootState\n  dispatch: AppDispatch\n}\n\nexport const addAppMiddleware = addMiddleware.withTypes<MiddlewareApiConfig>()\n\nexport const withAppMiddleware = withMiddleware.withTypes<MiddlewareApiConfig>()\n\nexport const createAppDispatchWithMiddlewareHook =\n  createDispatchWithMiddlewareHook.withTypes<MiddlewareApiConfig>()\n\nexport default middleware\n"})})]}),"\n",(0,d.jsx)(t.h2,{id:"dynamic-middleware-instance",children:"Dynamic Middleware Instance"}),"\n",(0,d.jsxs)(t.p,{children:['The "dynamic middleware instance" returned from ',(0,d.jsx)(t.code,{children:"createDynamicMiddleware"})," is an object similar to the object generated by ",(0,d.jsx)(t.code,{children:"createListenerMiddleware"}),". The instance object is ",(0,d.jsx)(t.em,{children:"not"})," the actual Redux middleware itself. Rather, it contains the middleware and some instance methods used to add middleware to the chain."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"export type DynamicMiddlewareInstance<\n  State = unknown,\n  Dispatch extends ReduxDispatch<UnknownAction> = ReduxDispatch<UnknownAction>,\n> = {\n  middleware: DynamicMiddleware<State, Dispatch>\n  addMiddleware: AddMiddleware<State, Dispatch>\n  withMiddleware: WithMiddleware<State, Dispatch>\n}\n"})}),"\n",(0,d.jsx)(t.h3,{id:"middleware",children:(0,d.jsx)(t.code,{children:"middleware"})}),"\n",(0,d.jsx)(t.p,{children:"The wrapper middleware instance, to add to the Redux store."}),"\n",(0,d.jsx)(t.p,{children:"You can place this anywhere in the middleware chain, but note that all the middleware you inject into this instance will be contained within this position."}),"\n",(0,d.jsx)(t.h3,{id:"addmiddleware",children:(0,d.jsx)(t.code,{children:"addMiddleware"})}),"\n",(0,d.jsx)(t.p,{children:"Injects a set of middleware into the instance."}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"addMiddleware(logger, listenerMiddleware.instance)\n"})}),"\n",(0,d.jsx)(t.admonition,{type:"note",children:(0,d.jsxs)(t.ul,{children:["\n",(0,d.jsxs)(t.li,{children:["\n",(0,d.jsx)(t.p,{children:"Middleware are compared by function reference, and each is only added to the chain once."}),"\n"]}),"\n",(0,d.jsxs)(t.li,{children:["\n",(0,d.jsx)(t.p,{children:"Middleware are stored in an ES6 map, and are thus called in insertion order during dispatch."}),"\n"]}),"\n"]})}),"\n",(0,d.jsx)(t.h3,{id:"withmiddleware",children:(0,d.jsx)(t.code,{children:"withMiddleware"})}),"\n",(0,d.jsxs)(t.p,{children:["Accepts a set of middleware, and creates an action. When dispatched, it injects the middleware and returns a version of ",(0,d.jsx)(t.code,{children:"dispatch"})," typed to be aware of any extensions added."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"const listenerDispatch = store.dispatch(\n  withMiddleware(listenerMiddleware.middleware),\n)\n\nconst unsubscribe = listenerDispatch(addListener({ type, effect }))\n"})}),"\n",(0,d.jsx)(t.h2,{id:"react-integration",children:"React Integration"}),"\n",(0,d.jsxs)(t.p,{children:["When imported from the React-specific entry point (",(0,d.jsx)(t.code,{children:"@reduxjs/toolkit/react"}),"), the result of calling ",(0,d.jsx)(t.code,{children:"createDynamicMiddleware"})," will have extra methods attached."]}),"\n",(0,d.jsx)(t.p,{children:(0,d.jsxs)(t.em,{children:["These depend on having ",(0,d.jsx)(t.code,{children:"react-redux"})," installed."]})}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"interface ReactDynamicMiddlewareInstance<\n  State = any,\n  Dispatch extends ReduxDispatch<UnknownAction> = ReduxDispatch<UnknownAction>,\n> extends DynamicMiddlewareInstance<State, Dispatch> {\n  createDispatchWithMiddlewareHook: CreateDispatchWithMiddlewareHook<\n    State,\n    Dispatch\n  >\n  createDispatchWithMiddlewareHookFactory: (\n    context?: Context<\n      ReactReduxContextValue<State, ActionFromDispatch<Dispatch>>\n    >,\n  ) => CreateDispatchWithMiddlewareHook<State, Dispatch>\n}\n"})}),"\n",(0,d.jsx)(t.h3,{id:"createdispatchwithmiddlewarehook",children:(0,d.jsx)(t.code,{children:"createDispatchWithMiddlewareHook"})}),"\n",(0,d.jsxs)(t.p,{children:["Accepts a set of middleware, and returns a ",(0,d.jsx)(t.a,{href:"https://react-redux.js.org/api/hooks#usedispatch",children:(0,d.jsx)(t.code,{children:"useDispatch"})})," hook returning a ",(0,d.jsx)(t.code,{children:"dispatch"})," typed to include extensions from provided middleware."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"const useListenerDispatch = createDispatchWithMiddlewareHook(\n  listenerInstance.middleware,\n)\n\nconst Component = () => {\n  const listenerDispatch = useListenerDispatch()\n  useEffect(() => {\n    const unsubscribe = listenerDispatch(addListener({ type, effect }))\n    return () => unsubscribe()\n  }, [dispatch])\n}\n"})}),"\n",(0,d.jsx)(t.admonition,{type:"caution",children:(0,d.jsxs)(t.p,{children:["Middleware is injected when ",(0,d.jsx)(t.code,{children:"createDispatchWithMiddlewareHook"})," is called, not when the ",(0,d.jsx)(t.code,{children:"useDispatch"})," hook is used."]})}),"\n",(0,d.jsx)(t.h3,{id:"createdispatchwithmiddlewarehookfactory",children:(0,d.jsx)(t.code,{children:"createDispatchWithMiddlewareHookFactory"})}),"\n",(0,d.jsxs)(t.p,{children:["Accepts a React context instance, and returns a ",(0,d.jsx)(t.code,{children:"createDispatchWithMiddlewareHook"})," built to use that context."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"const createDispatchWithMiddlewareHook =\n  createDispatchWithMiddlewareHookFactory(context)\n"})}),"\n",(0,d.jsxs)(t.p,{children:["Useful if you're using a ",(0,d.jsx)(t.a,{href:"https://react-redux.js.org/using-react-redux/accessing-store#providing-custom-context",children:"custom context"})," for React Redux."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>c});var d=i(6540);const n={},a=d.createContext(n);function r(e){const t=d.useContext(a);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),d.createElement(a.Provider,{value:t},e.children)}}}]);