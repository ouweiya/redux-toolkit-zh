"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[8384],{4409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(4848),i=n(8453);const s={id:"pagination",title:"Pagination",sidebar_label:"Pagination",hide_title:!0,description:"RTK Query > Usage > Pagination: suggestions for handling paginated data"},r="Pagination",o={id:"rtk-query/usage/pagination",title:"Pagination",description:"RTK Query > Usage > Pagination: suggestions for handling paginated data",source:"@site/docs/rtk-query/usage/pagination.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/pagination",permalink:"/redux-toolkit-zh/rtk-query/usage/pagination",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rtk-query/usage/pagination.mdx",tags:[],version:"current",frontMatter:{id:"pagination",title:"Pagination",sidebar_label:"Pagination",hide_title:!0,description:"RTK Query > Usage > Pagination: suggestions for handling paginated data"},sidebar:"docs",previous:{title:"Error Handling",permalink:"/redux-toolkit-zh/rtk-query/usage/error-handling"},next:{title:"Prefetching",permalink:"/redux-toolkit-zh/rtk-query/usage/prefetching"}},d={},l=[{value:"Pagination Recipes",id:"pagination-recipes",level:2},{value:"Setup an endpoint to accept a page <code>arg</code>",id:"setup-an-endpoint-to-accept-a-page-arg",level:3},{value:"Trigger the next page by incrementing the <code>page</code> state variable",id:"trigger-the-next-page-by-incrementing-the-page-state-variable",level:3},{value:"Automated Re-fetching of Paginated Queries",id:"automated-re-fetching-of-paginated-queries",level:3},{value:"General Pagination Example",id:"general-pagination-example",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"\xa0"}),"\n",(0,a.jsx)(t.h1,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsx)(t.p,{children:"RTK Query does not include any built-in pagination behavior. However, RTK Query does make it straightforward to integrate with a standard index-based pagination API. This is the most common form of pagination that you'll need to implement."}),"\n",(0,a.jsx)(t.h2,{id:"pagination-recipes",children:"Pagination Recipes"}),"\n",(0,a.jsxs)(t.h3,{id:"setup-an-endpoint-to-accept-a-page-arg",children:["Setup an endpoint to accept a page ",(0,a.jsx)(t.code,{children:"arg"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:'title="src/app/services/posts.ts"',children:"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\ninterface ListResponse<T> {\n  page: number\n  per_page: number\n  total: number\n  total_pages: number\n  data: T[]\n}\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (builder) => ({\n    listPosts: builder.query<ListResponse<Post>, number | void>({\n      query: (page = 1) => `posts?page=${page}`,\n    }),\n  }),\n})\n\nexport const { useListPostsQuery } = api\n"})}),"\n",(0,a.jsxs)(t.h3,{id:"trigger-the-next-page-by-incrementing-the-page-state-variable",children:["Trigger the next page by incrementing the ",(0,a.jsx)(t.code,{children:"page"})," state variable"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",metastring:'no-transpile title="src/features/posts/PostsManager.tsx"',children:"const PostList = () => {\n  const [page, setPage] = useState(1)\n  const { data: posts, isLoading, isFetching } = useListPostsQuery(page)\n\n  if (isLoading) {\n    return <div>Loading</div>\n  }\n\n  if (!posts?.data) {\n    return <div>No posts :(</div>\n  }\n\n  return (\n    <div>\n      {posts.data.map(({ id, title, status }) => (\n        <div key={id}>\n          {title} - {status}\n        </div>\n      ))}\n      <button onClick={() => setPage(page - 1)} isLoading={isFetching}>\n        Previous\n      </button>\n      <button onClick={() => setPage(page + 1)} isLoading={isFetching}>\n        Next\n      </button>\n    </div>\n  )\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"automated-re-fetching-of-paginated-queries",children:"Automated Re-fetching of Paginated Queries"}),"\n",(0,a.jsxs)(t.p,{children:["It is a common use-case to utilize tag invalidation to perform\n",(0,a.jsx)(t.a,{href:"/redux-toolkit-zh/rtk-query/usage/automated-refetching",children:"automated re-fetching"})," with RTK Query."]}),"\n",(0,a.jsxs)(t.p,{children:["A potential pitfall when combining this with pagination is that your paginated query may only\nprovide a ",(0,a.jsx)(t.em,{children:"partial"})," list at any given time, and hence not ",(0,a.jsx)(t.code,{children:"provide"})," tags for entity IDs that\nfall on pages which aren't currently shown. If a specific entity is deleted that falls on an\nearlier page, the paginated query will not be providing a tag for that specific ID, and will\nnot be invalidated to trigger re-fetching data. As a result, items on the current page that\nshould shift one item up will not have done so, and the total count of items and/or pages\nmay be incorrect."]}),"\n",(0,a.jsxs)(t.p,{children:["A strategy to overcome this is to ensure that the ",(0,a.jsx)(t.code,{children:"delete"})," mutation always ",(0,a.jsx)(t.code,{children:"invalidates"})," the\npaginated query, even if the deleted item is not ",(0,a.jsx)(t.em,{children:"currently"})," provided on that page. We can\nleverage the concept of\n",(0,a.jsx)(t.a,{href:"/redux-toolkit-zh/rtk-query/usage/automated-refetching#advanced-invalidation-with-abstract-tag-ids",children:"advanced invalidation with abstract tag ids"}),"\nto do this by ",(0,a.jsx)(t.code,{children:"providing"})," a ",(0,a.jsx)(t.code,{children:"'Posts'"})," tag with the ",(0,a.jsx)(t.code,{children:"'PARTIAL-LIST'"})," ID in our paginated query,\nand ",(0,a.jsx)(t.code,{children:"invalidating"})," that corresponding tag for any mutation that should affect it."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",metastring:'title="Example of invalidating cache for paginated queries"',children:"// file: api.ts\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\ninterface Post {\n  id: number\n  name: string\n}\ninterface ListResponse<T> {\n  page: number\n  per_page: number\n  total: number\n  total_pages: number\n  data: T[]\n}\n\nexport const postApi = createApi({\n  reducerPath: 'postsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  tagTypes: ['Posts'],\n  endpoints: (build) => ({\n    listPosts: build.query<ListResponse<Post>, number | void>({\n      query: (page = 1) => `posts?page=${page}`,\n      // highlight-start\n      providesTags: (result, error, page) =>\n        result\n          ? [\n              // Provides a tag for each post in the current page,\n              // as well as the 'PARTIAL-LIST' tag.\n              ...result.data.map(({ id }) => ({ type: 'Posts' as const, id })),\n              { type: 'Posts', id: 'PARTIAL-LIST' },\n            ]\n          : [{ type: 'Posts', id: 'PARTIAL-LIST' }],\n      // highlight-end\n    }),\n    deletePost: build.mutation<{ success: boolean; id: number }, number>({\n      query(id) {\n        return {\n          url: `post/${id}`,\n          method: 'DELETE',\n        }\n      },\n      // Invalidates the tag for this Post `id`, as well as the `PARTIAL-LIST` tag,\n      // causing the `listPosts` query to re-fetch if a component is subscribed to the query.\n      // highlight-start\n      invalidatesTags: (result, error, id) => [\n        { type: 'Posts', id },\n        { type: 'Posts', id: 'PARTIAL-LIST' },\n      ],\n      // highlight-end\n    }),\n  }),\n})\n"})}),"\n",(0,a.jsx)(t.h2,{id:"general-pagination-example",children:"General Pagination Example"}),"\n",(0,a.jsxs)(t.p,{children:["In the following example, you'll see ",(0,a.jsx)(t.code,{children:"Loading"})," on the initial query, but then as you move forward we'll use the next/previous buttons as a ",(0,a.jsx)(t.em,{children:"fetching"})," indicator while any non-cached query is performed. When you go back, the cached data will be served instantaneously."]}),"\n",(0,a.jsx)("iframe",{src:"https://codesandbox.io/embed/github/reduxjs/redux-toolkit/tree/master/examples/query/react/pagination?fontsize=12&runonclick=1&hidenavigation=1&theme=dark",style:{width:"100%",height:"600px",border:0,borderRadius:"4px",overflow:"hidden"},title:"RTK Query Pagination Example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);