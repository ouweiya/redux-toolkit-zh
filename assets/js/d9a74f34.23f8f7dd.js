"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[5405],{4736:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(4848),s=t(8453);const o={id:"setupListeners",title:"setupListeners",sidebar_label:"setupListeners",hide_title:!0,hide_table_of_contents:!1,description:"RTK Query > API: setupListeners reference"},r="setupListeners",a={id:"rtk-query/api/setupListeners",title:"setupListeners",description:"RTK Query > API: setupListeners reference",source:"@site/docs/rtk-query/api/setupListeners.mdx",sourceDirName:"rtk-query/api",slug:"/rtk-query/api/setupListeners",permalink:"/redux-toolkit-zh/rtk-query/api/setupListeners",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rtk-query/api/setupListeners.mdx",tags:[],version:"current",frontMatter:{id:"setupListeners",title:"setupListeners",sidebar_label:"setupListeners",hide_title:!0,hide_table_of_contents:!1,description:"RTK Query > API: setupListeners reference"},sidebar:"docs",previous:{title:"ApiProvider",permalink:"/redux-toolkit-zh/rtk-query/api/ApiProvider"},next:{title:"API Slice Overview",permalink:"/redux-toolkit-zh/rtk-query/api/created-api/overview"}},c={},d=[];function l(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.h1,{id:"setuplisteners",children:(0,i.jsx)(n.code,{children:"setupListeners"})}),"\n",(0,i.jsxs)(n.p,{children:["A utility used to enable ",(0,i.jsx)(n.code,{children:"refetchOnFocus"})," and ",(0,i.jsx)(n.code,{children:"refetchOnReconnect"})," behaviors. It requires the ",(0,i.jsx)(n.code,{children:"dispatch"})," method from your store. Calling ",(0,i.jsx)(n.code,{children:"setupListeners(store.dispatch)"})," will configure listeners with the recommended defaults, but you have the option of providing a callback for more granular control."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="setupListeners default configuration" no-transpile',children:"let initialized = false\nexport function setupListeners(\n  dispatch: ThunkDispatch<any, any, any>,\n  customHandler?: (\n    dispatch: ThunkDispatch<any, any, any>,\n    actions: {\n      onFocus: typeof onFocus\n      onFocusLost: typeof onFocusLost\n      onOnline: typeof onOnline\n      onOffline: typeof onOffline\n    },\n  ) => () => void,\n) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus())\n    const handleFocusLost = () => dispatch(onFocusLost())\n    const handleOnline = () => dispatch(onOnline())\n    const handleOffline = () => dispatch(onOffline())\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === 'visible') {\n        handleFocus()\n      } else {\n        handleFocusLost()\n      }\n    }\n\n    if (!initialized) {\n      if (typeof window !== 'undefined' && window.addEventListener) {\n        // Handle focus events\n        window.addEventListener(\n          'visibilitychange',\n          handleVisibilityChange,\n          false,\n        )\n        window.addEventListener('focus', handleFocus, false)\n\n        // Handle connection events\n        window.addEventListener('online', handleOnline, false)\n        window.addEventListener('offline', handleOffline, false)\n        initialized = true\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener('focus', handleFocus)\n      window.removeEventListener('visibilitychange', handleVisibilityChange)\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n      initialized = false\n    }\n    return unsubscribe\n  }\n\n  return customHandler\n    ? customHandler(dispatch, { onFocus, onFocusLost, onOffline, onOnline })\n    : defaultHandler()\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you notice, ",(0,i.jsx)(n.code,{children:"onFocus"}),", ",(0,i.jsx)(n.code,{children:"onFocusLost"}),", ",(0,i.jsx)(n.code,{children:"onOffline"}),", ",(0,i.jsx)(n.code,{children:"onOnline"})," are all actions that are provided to the callback. Additionally, these actions are made available to ",(0,i.jsx)(n.code,{children:"api.internalActions"})," and are able to be used by dispatching them like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="Manual onFocus event" no-transpile',children:"dispatch(api.internalActions.onFocus())\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);