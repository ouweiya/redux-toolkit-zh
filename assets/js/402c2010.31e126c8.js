"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[2839],{8458:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>o});var a=n(4848),t=n(8453);const r={id:"serializabilityMiddleware",title:"Serializability Middleware",sidebar_label:"Serializability Middleware",hide_title:!0},l="Serializability Middleware",s={id:"api/serializabilityMiddleware",title:"Serializability Middleware",description:"&nbsp;",source:"@site/docs/api/serializabilityMiddleware.mdx",sourceDirName:"api",slug:"/api/serializabilityMiddleware",permalink:"/api/serializabilityMiddleware",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/serializabilityMiddleware.mdx",tags:[],version:"current",frontMatter:{id:"serializabilityMiddleware",title:"Serializability Middleware",sidebar_label:"Serializability Middleware",hide_title:!0},sidebar:"docs",previous:{title:"Immutability Middleware",permalink:"/api/immutabilityMiddleware"},next:{title:"Action Creator Middleware",permalink:"/api/actionCreatorMiddleware"}},d={},o=[{value:"Options",id:"options",level:2},{value:"Exports",id:"exports",level:2},{value:"<code>createSerializableStateInvariantMiddleware</code>",id:"createserializablestateinvariantmiddleware",level:3},{value:"<code>isPlain</code>",id:"isplain",level:3}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.p,{children:"\xa0"}),"\n",(0,a.jsx)(i.h1,{id:"serializability-middleware",children:"Serializability Middleware"}),"\n",(0,a.jsxs)(i.p,{children:["A custom middleware that detects if any non-serializable values have been included in state or dispatched actions, modeled after ",(0,a.jsx)(i.code,{children:"redux-immutable-state-invariant"}),". Any detected non-serializable values will be logged to the console."]}),"\n",(0,a.jsxs)(i.p,{children:["This middleware is added to the store by default by ",(0,a.jsx)(i.a,{href:"/api/configureStore",children:(0,a.jsx)(i.code,{children:"configureStore"})})," and ",(0,a.jsx)(i.a,{href:"/api/getDefaultMiddleware",children:(0,a.jsx)(i.code,{children:"getDefaultMiddleware"})}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["You can customize the behavior of this middleware by passing any of the supported options as the ",(0,a.jsx)(i.code,{children:"serializableCheck"})," value for ",(0,a.jsx)(i.code,{children:"getDefaultMiddleware"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",metastring:"no-transpile",children:"interface SerializableStateInvariantMiddlewareOptions {\n  /**\n   * The function to check if a value is considered serializable. This\n   * function is applied recursively to every value contained in the\n   * state. Defaults to `isPlain()`.\n   */\n  isSerializable?: (value: any) => boolean\n  /**\n   * The function that will be used to retrieve entries from each\n   * value.  If unspecified, `Object.entries` will be used. Defaults\n   * to `undefined`.\n   */\n  getEntries?: (value: any) => [string, any][]\n\n  /**\n   * An array of action types to ignore when checking for serializability.\n   * Defaults to []\n   */\n  ignoredActions?: string[]\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to\n   * ['meta.arg', 'meta.baseQueryMeta']\n   */\n  ignoredActionPaths?: (string | RegExp)[]\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to []\n   */\n  ignoredPaths?: (string | RegExp)[]\n  /**\n   * Execution time warning threshold. If the middleware takes longer\n   * than `warnAfter` ms, a warning will be displayed in the console.\n   * Defaults to 32ms.\n   */\n  warnAfter?: number\n\n  /**\n   * Opt out of checking state. When set to `true`, other state-related params will be ignored.\n   */\n  ignoreState?: boolean\n\n  /**\n   * Opt out of checking actions. When set to `true`, other action-related params will be ignored.\n   */\n  ignoreActions?: boolean\n}\n"})}),"\n",(0,a.jsx)(i.h2,{id:"exports",children:"Exports"}),"\n",(0,a.jsx)(i.h3,{id:"createserializablestateinvariantmiddleware",children:(0,a.jsx)(i.code,{children:"createSerializableStateInvariantMiddleware"})}),"\n",(0,a.jsx)(i.p,{children:"Creates an instance of the serializability check middleware, with the given options."}),"\n",(0,a.jsxs)(i.p,{children:["You will most likely not need to call this yourself, as ",(0,a.jsx)(i.code,{children:"getDefaultMiddleware"})," already does so."]}),"\n",(0,a.jsx)(i.p,{children:"Example:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"// file: reducer.ts noEmit\n\nexport default function (state = {}, action: any) {\n  return state\n}\n\n// file: store.ts\n\nimport { Iterable } from 'immutable'\nimport {\n  configureStore,\n  createSerializableStateInvariantMiddleware,\n  isPlain,\n  Tuple,\n} from '@reduxjs/toolkit'\nimport reducer from './reducer'\n\n// Augment middleware to consider Immutable.JS iterables serializable\nconst isSerializable = (value: any) =>\n  Iterable.isIterable(value) || isPlain(value)\n\nconst getEntries = (value: any) =>\n  Iterable.isIterable(value) ? value.entries() : Object.entries(value)\n\nconst serializableMiddleware = createSerializableStateInvariantMiddleware({\n  isSerializable,\n  getEntries,\n})\n\nconst store = configureStore({\n  reducer,\n  middleware: () => new Tuple(serializableMiddleware),\n})\n"})}),"\n",(0,a.jsx)(i.h3,{id:"isplain",children:(0,a.jsx)(i.code,{children:"isPlain"})}),"\n",(0,a.jsx)(i.p,{children:'Checks whether the given value is considered a "plain value" or not.'}),"\n",(0,a.jsx)(i.p,{children:"Currently implemented as:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ts",children:"// file: src/isPlainObject.ts noEmit\n\ndeclare function isPlainObject(value: unknown): value is object\nexport default isPlainObject\n\n// file: src/serializableStateInvariantMiddleware.ts\nimport isPlainObject from './isPlainObject'\n\nexport function isPlain(val: any) {\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val)\n  )\n}\n"})}),"\n",(0,a.jsxs)(i.p,{children:["This will accept all standard JS objects, arrays, and primitives, but return false for ",(0,a.jsx)(i.code,{children:"Date"}),"s, ",(0,a.jsx)(i.code,{children:"Map"}),"s, and other similar class instances."]})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>s});var a=n(6540);const t={},r=a.createContext(t);function l(e){const i=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);