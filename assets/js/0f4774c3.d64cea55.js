"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[2049],{7508:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=o(4848),i=o(8453);const r={id:"polling",title:"Polling",sidebar_label:"Polling",hide_title:!0,description:"RTK Query > Usage > Polling: re-fetching data on a timer"},l="Polling",s={id:"rtk-query/usage/polling",title:"Polling",description:"RTK Query > Usage > Polling: re-fetching data on a timer",source:"@site/docs/rtk-query/usage/polling.mdx",sourceDirName:"rtk-query/usage",slug:"/rtk-query/usage/polling",permalink:"/redux-toolkit-zh/rtk-query/usage/polling",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rtk-query/usage/polling.mdx",tags:[],version:"current",frontMatter:{id:"polling",title:"Polling",sidebar_label:"Polling",hide_title:!0,description:"RTK Query > Usage > Polling: re-fetching data on a timer"},sidebar:"docs",previous:{title:"Prefetching",permalink:"/redux-toolkit-zh/rtk-query/usage/prefetching"},next:{title:"Streaming Updates",permalink:"/redux-toolkit-zh/rtk-query/usage/streaming-updates"}},a={},c=[{value:"Polling Overview",id:"polling-overview",level:2},{value:"Polling Without React Hooks",id:"polling-without-react-hooks",level:2},{value:"Polling Example",id:"polling-example",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"\xa0"}),"\n",(0,n.jsx)(t.h1,{id:"polling",children:"Polling"}),"\n",(0,n.jsx)(t.h2,{id:"polling-overview",children:"Polling Overview"}),"\n",(0,n.jsxs)(t.p,{children:["Polling gives you the ability to have a 'real-time' effect by causing a query to run at a specified interval. To enable polling for a query, pass a ",(0,n.jsx)(t.code,{children:"pollingInterval"})," to the ",(0,n.jsx)(t.code,{children:"useQuery"})," hook or action creator with an interval in milliseconds:"]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsxs)(t.p,{children:["Polling additionally has the ability to skip sending requests while the window is out of focus. To enable this behavior, pass ",(0,n.jsx)(t.code,{children:"skipPollingIfUnfocused: true"})," to the ",(0,n.jsx)(t.code,{children:"useQuery"})," hook or action creator."]}),(0,n.jsx)(t.p,{children:(0,n.jsxs)(t.em,{children:["Note: ",(0,n.jsx)(t.code,{children:"skipPollingIfUnfocused"})," requires ",(0,n.jsx)(t.a,{href:"/redux-toolkit-zh/rtk-query/api/setupListeners",children:(0,n.jsx)(t.code,{children:"setupListeners"})})," to have been called."]})})]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",metastring:'no-transpile title="src/Pokemon.tsx" no-transpile',children:"import * as React from 'react'\nimport { useGetPokemonByNameQuery } from './services/pokemon'\n\nexport const Pokemon = ({ name }: { name: string }) => {\n  // Automatically refetch every 3s unless the window is out of focus\n  const { data, status, error, refetch } = useGetPokemonByNameQuery(name, {\n    pollingInterval: 3000,\n    skipPollingIfUnfocused: true,\n  })\n\n  return <div>{data}</div>\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"In an action creator without React Hooks:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"const { data, status, error, refetch } = store.dispatch(\n  endpoints.getCountById.initiate(id, {\n    subscriptionOptions: { pollingInterval: 3000 },\n  }),\n)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"polling-without-react-hooks",children:"Polling Without React Hooks"}),"\n",(0,n.jsxs)(t.p,{children:["If you use polling without the convenience of React Hooks, you will need to manually call ",(0,n.jsx)(t.code,{children:"updateSubscriptionOptions"})," on the promise ref to update the interval. This approach varies by framework but is possible everywhere. See the ",(0,n.jsx)(t.a,{href:"./examples#svelte",children:"Svelte Example"})," for one possibility, and the ",(0,n.jsx)(t.a,{href:"/redux-toolkit-zh/rtk-query/usage/usage-without-react-hooks",children:"Usage Without React Hooks"})," page for more details on working with subscriptions manually."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"queryRef.updateSubscriptionOptions({ pollingInterval: 0 })\n"})}),"\n",(0,n.jsx)(t.h2,{id:"polling-example",children:"Polling Example"}),"\n",(0,n.jsx)("iframe",{src:"https://codesandbox.io/embed/github/reduxjs/redux-toolkit/tree/master/examples/query/react/polling?fontsize=12&runonclick=1&hidenavigation=1&theme=dark",style:{width:"100%",height:"600px",border:0,borderRadius:"4px",overflow:"hidden"},title:"rtk-query-react-hooks-example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>l,x:()=>s});var n=o(6540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);