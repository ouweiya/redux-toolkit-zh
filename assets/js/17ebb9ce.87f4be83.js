"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[1597],{849:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>a,toc:()=>s});var n=r(4848),i=r(8453);const d={id:"redux-integration",title:"API Slices: Redux Integration",sidebar_label:"Redux Integration",hide_title:!0},o="API Slices: Redux Integration",a={id:"rtk-query/api/created-api/redux-integration",title:"API Slices: Redux Integration",description:"&nbsp;",source:"@site/docs/rtk-query/api/created-api/redux-integration.mdx",sourceDirName:"rtk-query/api/created-api",slug:"/rtk-query/api/created-api/redux-integration",permalink:"/redux-toolkit-zh/rtk-query/api/created-api/redux-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rtk-query/api/created-api/redux-integration.mdx",tags:[],version:"current",frontMatter:{id:"redux-integration",title:"API Slices: Redux Integration",sidebar_label:"Redux Integration",hide_title:!0},sidebar:"docs",previous:{title:"API Slice Overview",permalink:"/redux-toolkit-zh/rtk-query/api/created-api/overview"},next:{title:"Endpoints",permalink:"/redux-toolkit-zh/rtk-query/api/created-api/endpoints"}},c={},s=[{value:"<code>reducerPath</code>",id:"reducerpath",level:2},{value:"<code>reducer</code>",id:"reducer",level:2},{value:"<code>middleware</code>",id:"middleware",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"\xa0"}),"\n",(0,n.jsx)(t.h1,{id:"api-slices-redux-integration",children:"API Slices: Redux Integration"}),"\n",(0,n.jsxs)(t.p,{children:["Internally, ",(0,n.jsx)(t.code,{children:"createApi"})," will call ",(0,n.jsxs)(t.a,{href:"https://redux-toolkit.js.org/api/createSlice",children:["the Redux Toolkit ",(0,n.jsx)(t.code,{children:"createSlice"})," API"]})," to generate a slice reducer and corresponding action creators with the appropriate logic for caching fetched data. It also automatically generates a custom Redux middleware that manages subscription counts and cache lifetimes."]}),"\n",(0,n.jsxs)(t.p,{children:["The generated slice reducer and the middleware both need to be added to your Redux store setup in ",(0,n.jsx)(t.code,{children:"configureStore"})," in order to work correctly:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:'title="src/store.ts"',children:"// file: src/services/pokemon.ts noEmit\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n\nexport const pokemonApi = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: () => ({}),\n})\n\n// file: src/store.ts\nimport { configureStore } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { pokemonApi } from './services/pokemon'\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [pokemonApi.reducerPath]: pokemonApi.reducer,\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(pokemonApi.middleware),\n})\n\n// configure listeners using the provided defaults\nsetupListeners(store.dispatch)\n"})}),"\n",(0,n.jsx)(t.h2,{id:"reducerpath",children:(0,n.jsx)(t.code,{children:"reducerPath"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"reducerPath: string\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Contains the ",(0,n.jsx)(t.code,{children:"reducerPath"})," option provided to ",(0,n.jsx)(t.code,{children:"createApi"}),". Use this as the root state key when adding the ",(0,n.jsx)(t.code,{children:"reducer"})," function to the store so that the rest of the generated API logic can find the state correctly."]}),"\n",(0,n.jsx)(t.h2,{id:"reducer",children:(0,n.jsx)(t.code,{children:"reducer"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"reducer: Reducer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["A standard Redux slice reducer function containing the logic for updating the cached data. Add this to the Redux store using the ",(0,n.jsx)(t.code,{children:"reducerPath"})," you provided as the root state key."]}),"\n",(0,n.jsx)(t.h2,{id:"middleware",children:(0,n.jsx)(t.code,{children:"middleware"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"middleware: Middleware\n"})}),"\n",(0,n.jsx)(t.p,{children:"A custom Redux middleware that contains logic for managing caching, invalidation, subscriptions, polling, and more. Add this to the store setup after other middleware."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const i={},d=n.createContext(i);function o(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);