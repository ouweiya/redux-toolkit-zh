"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[4488],{4977:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var n=i(4848),a=i(8453);const l={id:"immutabilityMiddleware",title:"Immutability Middleware",sidebar_label:"Immutability Middleware",hide_title:!0},r="Immutability Middleware",d={id:"api/immutabilityMiddleware",title:"Immutability Middleware",description:"&nbsp;",source:"@site/docs/api/immutabilityMiddleware.mdx",sourceDirName:"api",slug:"/api/immutabilityMiddleware",permalink:"/api/immutabilityMiddleware",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/immutabilityMiddleware.mdx",tags:[],version:"current",frontMatter:{id:"immutabilityMiddleware",title:"Immutability Middleware",sidebar_label:"Immutability Middleware",hide_title:!0},sidebar:"docs",previous:{title:"getDefaultMiddleware",permalink:"/api/getDefaultMiddleware"},next:{title:"Serializability Middleware",permalink:"/api/serializabilityMiddleware"}},o={},s=[{value:"Options",id:"options",level:2},{value:"Exports",id:"exports",level:2},{value:"<code>createImmutableStateInvariantMiddleware</code>",id:"createimmutablestateinvariantmiddleware",level:3},{value:"<code>isImmutableDefault</code>",id:"isimmutabledefault",level:3}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"\xa0"}),"\n",(0,n.jsx)(t.h1,{id:"immutability-middleware",children:"Immutability Middleware"}),"\n",(0,n.jsxs)(t.p,{children:["A port of the ",(0,n.jsx)(t.a,{href:"https://github.com/leoasis/redux-immutable-state-invariant",children:(0,n.jsx)(t.code,{children:"redux-immutable-state-invariant"})})," middleware, customized for use with Redux Toolkit. Any detected mutations will be thrown as errors."]}),"\n",(0,n.jsxs)(t.p,{children:["This middleware is added to the store by default by ",(0,n.jsx)(t.a,{href:"/api/configureStore",children:(0,n.jsx)(t.code,{children:"configureStore"})})," and ",(0,n.jsx)(t.a,{href:"/api/getDefaultMiddleware",children:(0,n.jsx)(t.code,{children:"getDefaultMiddleware"})}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["You can customize the behavior of this middleware by passing any of the supported options as the ",(0,n.jsx)(t.code,{children:"immutableCheck"})," value for ",(0,n.jsx)(t.code,{children:"getDefaultMiddleware"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",metastring:"no-transpile",children:"type IsImmutableFunc = (value: any) => boolean\n\ninterface ImmutableStateInvariantMiddlewareOptions {\n  /**\n    Callback function to check if a value is considered to be immutable.\n    This function is applied recursively to every value contained in the state.\n    The default implementation will return true for primitive types \n    (like numbers, strings, booleans, null and undefined).\n   */\n  isImmutable?: IsImmutableFunc\n  /** \n    An array of dot-separated path strings or RegExps that match named nodes from \n    the root state to ignore when checking for immutability.\n    Defaults to undefined\n   */\n  ignoredPaths?: (string | RegExp)[]\n  /** Print a warning if checks take longer than N ms. Default: 32ms */\n  warnAfter?: number\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"exports",children:"Exports"}),"\n",(0,n.jsx)(t.h3,{id:"createimmutablestateinvariantmiddleware",children:(0,n.jsx)(t.code,{children:"createImmutableStateInvariantMiddleware"})}),"\n",(0,n.jsx)(t.p,{children:"Creates an instance of the immutability check middleware, with the given options."}),"\n",(0,n.jsxs)(t.p,{children:["You will most likely not need to call this yourself, as ",(0,n.jsx)(t.code,{children:"getDefaultMiddleware"})," already does so."]}),"\n",(0,n.jsx)(t.p,{children:"Example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"// file: exampleSlice.ts\n\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const exampleSlice = createSlice({\n  name: 'example',\n  initialState: {\n    user: 'will track changes',\n    ignoredPath: 'single level',\n    ignoredNested: {\n      one: 'one',\n      two: 'two',\n    },\n  },\n  reducers: {},\n})\n\nexport default exampleSlice.reducer\n\n// file: store.ts\n\nimport {\n  configureStore,\n  createImmutableStateInvariantMiddleware,\n  Tuple,\n} from '@reduxjs/toolkit'\n\nimport exampleSliceReducer from './exampleSlice'\n\nconst immutableInvariantMiddleware = createImmutableStateInvariantMiddleware({\n  ignoredPaths: ['ignoredPath', 'ignoredNested.one', 'ignoredNested.two'],\n})\n\nconst store = configureStore({\n  reducer: exampleSliceReducer,\n  // Note that this will replace all default middleware\n  middleware: () => new Tuple(immutableInvariantMiddleware),\n})\n"})}),"\n",(0,n.jsxs)(t.p,{children:["doing the same without removing all other middlewares, using ",(0,n.jsx)(t.a,{href:"./getDefaultMiddleware",children:"getDetfaultMiddleware"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"// file: exampleSlice.ts noEmit\n\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const exampleSlice = createSlice({\n  name: 'example',\n  initialState: {\n    user: 'will track changes',\n    ignoredPath: 'single level',\n    ignoredNested: {\n      one: 'one',\n      two: 'two',\n    },\n  },\n  reducers: {},\n})\n\nexport default exampleSlice.reducer\n\n// file: store.ts\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport exampleSliceReducer from './exampleSlice'\n\nconst store = configureStore({\n  reducer: exampleSliceReducer,\n  // This replaces the original default middleware with the customized versions\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      immutableCheck: {\n        ignoredPaths: ['ignoredPath', 'ignoredNested.one', 'ignoredNested.two'],\n      },\n    }),\n})\n"})}),"\n",(0,n.jsx)(t.h3,{id:"isimmutabledefault",children:(0,n.jsx)(t.code,{children:"isImmutableDefault"})}),"\n",(0,n.jsx)(t.p,{children:'Default implementation of the "is this value immutable?" check. Currently implemented as:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"return (\n  typeof value !== 'object' || value === null || typeof value === 'undefined'\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:"This will return true for primitive types (like numbers, strings, booleans, null and undefined)"})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>d});var n=i(6540);const a={},l=n.createContext(a);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);