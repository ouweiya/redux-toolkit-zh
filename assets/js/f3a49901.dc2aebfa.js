"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[1846],{2120:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=t(4848),a=t(8453);const r={id:"getDefaultMiddleware",title:"getDefaultMiddleware",sidebar_label:"getDefaultMiddleware",hide_title:!0},d="getDefaultMiddleware",l={id:"api/getDefaultMiddleware",title:"getDefaultMiddleware",description:"&nbsp;",source:"@site/docs/api/getDefaultMiddleware.mdx",sourceDirName:"api",slug:"/api/getDefaultMiddleware",permalink:"/api/getDefaultMiddleware",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/getDefaultMiddleware.mdx",tags:[],version:"current",frontMatter:{id:"getDefaultMiddleware",title:"getDefaultMiddleware",sidebar_label:"getDefaultMiddleware",hide_title:!0},sidebar:"docs",previous:{title:"configureStore",permalink:"/api/configureStore"},next:{title:"Immutability Middleware",permalink:"/api/immutabilityMiddleware"}},o={},s=[{value:"Intended Usage",id:"intended-usage",level:2},{value:"Included Default Middleware",id:"included-default-middleware",level:2},{value:"Development",id:"development",level:3},{value:"Production",id:"production",level:3},{value:"Customizing the Included Middleware",id:"customizing-the-included-middleware",level:2},{value:"API Reference",id:"api-reference",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.h1,{id:"getdefaultmiddleware",children:(0,i.jsx)(n.code,{children:"getDefaultMiddleware"})}),"\n",(0,i.jsx)(n.p,{children:"Returns an array containing the default list of middleware."}),"\n",(0,i.jsx)(n.h2,{id:"intended-usage",children:"Intended Usage"}),"\n",(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.a,{href:"/api/configureStore",children:(0,i.jsx)(n.code,{children:"configureStore"})})," adds some middleware to the Redux store setup automatically."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const store = configureStore({\n  reducer: rootReducer,\n})\n\n// Store has middleware added, because the middleware list was not customized\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to customize the list of middleware, you can supply an array of middleware functions to ",(0,i.jsx)(n.code,{children:"configureStore"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const store = configureStore({\n  reducer: rootReducer,\n  middleware: () => new Tuple(thunk, logger),\n})\n\n// Store specifically has the thunk and logger middleware applied\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, when you supply the ",(0,i.jsx)(n.code,{children:"middleware"})," option, you are responsible for defining ",(0,i.jsx)(n.em,{children:"all"})," the middleware you want added\nto the store. ",(0,i.jsx)(n.code,{children:"configureStore"})," will not add any extra middleware beyond what you listed."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"getDefaultMiddleware"})," is useful if you want to add some custom middleware, but also still want to have the default\nmiddleware added as well:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"import { configureStore } from '@reduxjs/toolkit'\n\nimport logger from 'redux-logger'\n\nimport rootReducer from './reducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n})\n\n// Store has all of the default middleware added, _plus_ the logger middleware\n"})}),"\n",(0,i.jsxs)(n.p,{children:["It is preferable to use the chainable ",(0,i.jsx)(n.code,{children:".concat(...)"})," and ",(0,i.jsx)(n.code,{children:".prepend(...)"})," methods of the returned ",(0,i.jsx)(n.code,{children:"Tuple"})," instead of the array spread operator, as the latter can lose valuable TS type information under some circumstances."]}),"\n",(0,i.jsx)(n.h2,{id:"included-default-middleware",children:"Included Default Middleware"}),"\n",(0,i.jsx)(n.h3,{id:"development",children:"Development"}),"\n",(0,i.jsxs)(n.p,{children:["One of the goals of Redux Toolkit is to provide opinionated defaults and prevent common mistakes. As part of that,\n",(0,i.jsx)(n.code,{children:"getDefaultMiddleware"})," includes some middleware that are added ",(0,i.jsx)(n.strong,{children:"in development builds of your app only"})," to\nprovide runtime checks for three common issues:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/api/immutabilityMiddleware",children:"Immutability check middleware"}),": deeply compares\nstate values for mutations. It can detect mutations in reducers during a dispatch, and also mutations that occur between\ndispatches (such as in a component or a selector). When a mutation is detected, it will throw an error and indicate the key\npath for where the mutated value was detected in the state tree. (Forked from ",(0,i.jsx)(n.a,{href:"https://github.com/leoasis/redux-immutable-state-invariant",children:(0,i.jsx)(n.code,{children:"redux-immutable-state-invariant"})}),".)"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/api/serializabilityMiddleware",children:"Serializability check middleware"}),": a custom middleware created specifically for use in Redux Toolkit. Similar in\nconcept to ",(0,i.jsx)(n.code,{children:"immutable-state-invariant"}),", but deeply checks your state tree and your actions for non-serializable values\nsuch as functions, Promises, Symbols, and other non-plain-JS-data values. When a non-serializable value is detected, a\nconsole error will be printed with the key path for where the non-serializable value was detected."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/api/actionCreatorMiddleware",children:"Action creator check middleware"}),": another custom middleware created specifically for use in Redux Toolkit.\nIdentifies when an action creator was mistakenly dispatched without being called, and warns to console with the action type."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In addition to these development tool middleware, it also adds ",(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux-thunk",children:(0,i.jsx)(n.code,{children:"redux-thunk"})}),"\nby default, since thunks are the basic recommended side effects middleware for Redux."]}),"\n",(0,i.jsx)(n.p,{children:"Currently, the return value is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const middleware = [\n  actionCreatorInvariant,\n  immutableStateInvariant,\n  thunk,\n  serializableStateInvariant,\n]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"production",children:"Production"}),"\n",(0,i.jsx)(n.p,{children:"Currently, the return value is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const middleware = [thunk]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-the-included-middleware",children:"Customizing the Included Middleware"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"getDefaultMiddleware"})," accepts an options object that allows customizing each middleware in two ways:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each middleware can be excluded from the result array by passing ",(0,i.jsx)(n.code,{children:"false"})," for its corresponding field"]}),"\n",(0,i.jsx)(n.li,{children:"Each middleware can have its options customized by passing the matching options object for its corresponding field"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'This example shows excluding the serializable state check middleware, and passing a specific value for the thunk\nmiddleware\'s "extra argument":'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// file: reducer.ts noEmit\n\nexport default function rootReducer(state = {}, action: any) {\n  return state\n}\n\n// file: api.ts noEmit\n\nexport declare const myCustomApiService: any\n\n// file: store.ts\n\nimport { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducer'\nimport { myCustomApiService } from './api'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: myCustomApiService,\n      },\n      serializableCheck: false,\n    }),\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:'interface ThunkOptions<E = any> {\n  extraArgument: E\n}\n\ninterface ImmutableStateInvariantMiddlewareOptions {\n  // See "Immutability Middleware" page for definition\n}\n\ninterface SerializableStateInvariantMiddlewareOptions {\n  // See "Serializability Middleware" page for definition\n}\n\ninterface ActionCreatorInvariantMiddlewareOptions {\n  // See "Action Creator Middleware" page for definition\n}\n\ninterface GetDefaultMiddlewareOptions {\n  thunk?: boolean | ThunkOptions\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\n  actionCreatorCheck?: boolean | ActionCreatorInvariantMiddlewareOptions\n}\n\nfunction getDefaultMiddleware<S = any>(\n  options: GetDefaultMiddlewareOptions = {},\n): Middleware<{}, S>[]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(6540);const a={},r=i.createContext(a);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);