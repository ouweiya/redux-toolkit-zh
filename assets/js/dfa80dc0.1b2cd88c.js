"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[491],{1892:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>c});var t=i(4848),s=i(8453);const d={id:"code-splitting",title:"API Slices: Code Splitting and Generation",sidebar_label:"Code Splitting",hide_title:!0},o="API Slices: Code Splitting and Generation",r={id:"rtk-query/api/created-api/code-splitting",title:"API Slices: Code Splitting and Generation",description:"&nbsp;",source:"@site/docs/rtk-query/api/created-api/code-splitting.mdx",sourceDirName:"rtk-query/api/created-api",slug:"/rtk-query/api/created-api/code-splitting",permalink:"/rtk-query/api/created-api/code-splitting",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rtk-query/api/created-api/code-splitting.mdx",tags:[],version:"current",frontMatter:{id:"code-splitting",title:"API Slices: Code Splitting and Generation",sidebar_label:"Code Splitting",hide_title:!0},sidebar:"docs",previous:{title:"Endpoints",permalink:"/rtk-query/api/created-api/endpoints"},next:{title:"API Slice Utilities",permalink:"/rtk-query/api/created-api/api-slice-utils"}},a={},c=[{value:"<code>injectEndpoints</code>",id:"injectendpoints",level:2},{value:"Signature",id:"signature",level:4},{value:"Description",id:"description",level:4},{value:"<code>enhanceEndpoints</code>",id:"enhanceendpoints",level:2},{value:"Signature",id:"signature-1",level:4},{value:"Description",id:"description-1",level:4}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\xa0"}),"\n",(0,t.jsx)(n.h1,{id:"api-slices-code-splitting-and-generation",children:"API Slices: Code Splitting and Generation"}),"\n",(0,t.jsxs)(n.p,{children:["Each API slice allows ",(0,t.jsx)(n.a,{href:"/rtk-query/usage/code-splitting",children:"additional endpoint definitions to be injected at runtime"})," after the initial API slice has been defined. This can be beneficial for apps that may have ",(0,t.jsx)(n.em,{children:"many"})," endpoints."]}),"\n",(0,t.jsxs)(n.p,{children:["The individual API slice endpoint definitions can also be split across multiple files. This is primarily useful for working with API slices that were ",(0,t.jsx)(n.a,{href:"/rtk-query/usage/code-generation",children:"code-generated from an API schema file"}),", allowing you to add additional custom behavior and configuration to a set of automatically-generated endpoint definitions."]}),"\n",(0,t.jsxs)(n.p,{children:["Each API slice object has ",(0,t.jsx)(n.code,{children:"injectEndpoints"})," and ",(0,t.jsx)(n.code,{children:"enhanceEndpoints"})," functions to support these use cases."]}),"\n",(0,t.jsx)(n.h2,{id:"injectendpoints",children:(0,t.jsx)(n.code,{children:"injectEndpoints"})}),"\n",(0,t.jsx)(n.h4,{id:"signature",children:"Signature"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const injectEndpoints = (endpointOptions: InjectedEndpointOptions) =>\n  EnhancedApiSlice\n\ninterface InjectedEndpointOptions {\n  endpoints: (build: EndpointBuilder) => NewEndpointDefinitions\n  /**\n   * Optionally allows endpoints to be overridden if defined by multiple `injectEndpoints` calls.\n   *\n   * If set to `true`, will override existing endpoints with the new definition.\n   * If set to `'throw'`, will throw an error if an endpoint is redefined with a different definition.\n   * If set to `false` (or unset), will not override existing endpoints with the new definition, and log a warning in development.\n   */\n  overrideExisting?: boolean | 'throw'\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Accepts an options object containing the same ",(0,t.jsx)(n.code,{children:"endpoints"})," builder callback you would pass to ",(0,t.jsx)(n.a,{href:"/rtk-query/api/createApi#endpoints",children:(0,t.jsx)(n.code,{children:"createApi.endpoints"})}),". Any endpoint definitions defined using that builder will be merged into the existing endpoint definitions for this API slice using a shallow merge, so any new endpoint definitions will override existing endpoints with the same name."]}),"\n",(0,t.jsx)(n.p,{children:"Returns an updated and enhanced version of the API slice object, containing the combined endpoint definitions."}),"\n",(0,t.jsxs)(n.p,{children:["Endpoints will not be overridden unless ",(0,t.jsx)(n.code,{children:"overrideExisting"})," is set to ",(0,t.jsx)(n.code,{children:"true"}),". If not, a development mode warning will be shown to notify you if there is a name clash between endpoint definitions."]}),"\n",(0,t.jsx)(n.p,{children:"This method is primarily useful for code splitting and hot reloading."}),"\n",(0,t.jsx)(n.h2,{id:"enhanceendpoints",children:(0,t.jsx)(n.code,{children:"enhanceEndpoints"})}),"\n",(0,t.jsx)(n.h4,{id:"signature-1",children:"Signature"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const enhanceEndpoints = (endpointOptions: EnhanceEndpointsOptions) =>\n  EnhancedApiSlice\n\ninterface EnhanceEndpointsOptions {\n  addTagTypes?: readonly string[]\n  endpoints?: Record<string, Partial<EndpointDefinition>>\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Any provided tag types or endpoint definitions will be merged into the existing endpoint definitions for this API slice. Unlike ",(0,t.jsx)(n.code,{children:"injectEndpoints"}),", the partial endpoint definitions will not ",(0,t.jsx)(n.em,{children:"replace"})," existing definitions, but are rather merged together on a per-definition basis (ie, ",(0,t.jsx)(n.code,{children:"Object.assign(existingEndpoint, newPartialEndpoint)"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"Returns an updated and enhanced version of the API slice object, containing the combined endpoint definitions."}),"\n",(0,t.jsx)(n.p,{children:"This is primarily useful for taking an API slice object that was code-generated from an API schema file like OpenAPI, and adding additional specific hand-written configuration for cache invalidation management on top of the generated endpoint definitions."}),"\n",(0,t.jsxs)(n.p,{children:["For example, ",(0,t.jsx)(n.code,{children:"enhanceEndpoints"})," can be used to modify caching behavior by changing the values of ",(0,t.jsx)(n.code,{children:"providesTags"}),", ",(0,t.jsx)(n.code,{children:"invalidatesTags"}),", and ",(0,t.jsx)(n.code,{children:"keepUnusedDataFor"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: api.ts noEmit\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const api = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n  endpoints: (builder) => ({\n    getUserByUserId: builder.query({\n      query() {\n        return ''\n      },\n    }),\n    patchUserByUserId: builder.mutation({\n      query() {\n        return ''\n      },\n    }),\n    getUsers: builder.query({\n      query() {\n        return ''\n      },\n    }),\n  }),\n})\n\n// file: enhanceEndpoints.ts\nimport { api } from './api'\n\nconst enhancedApi = api.enhanceEndpoints({\n  addTagTypes: ['User'],\n  endpoints: {\n    getUserByUserId: {\n      providesTags: ['User'],\n    },\n    patchUserByUserId: {\n      invalidatesTags: ['User'],\n    },\n    // alternatively, define a function which is called with the endpoint definition as an argument\n    getUsers(endpoint) {\n      endpoint.providesTags = ['User']\n      endpoint.keepUnusedDataFor = 120\n    },\n  },\n})\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},d=t.createContext(s);function o(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);