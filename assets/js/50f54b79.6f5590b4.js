"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[1997],{6460:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>a});var t=r(4848),o=r(8453);const d={id:"configureStore",title:"configureStore",sidebar_label:"configureStore",hide_title:!0},i="configureStore",s={id:"api/configureStore",title:"configureStore",description:"&nbsp;",source:"@site/docs/api/configureStore.mdx",sourceDirName:"api",slug:"/api/configureStore",permalink:"/api/configureStore",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/configureStore.mdx",tags:[],version:"current",frontMatter:{id:"configureStore",title:"configureStore",sidebar_label:"configureStore",hide_title:!0},sidebar:"docs",previous:{title:"Setup with Next.js",permalink:"/usage/nextjs"},next:{title:"getDefaultMiddleware",permalink:"/api/getDefaultMiddleware"}},l={},a=[{value:"Purpose and Behavior",id:"purpose-and-behavior",level:2},{value:"Parameters",id:"parameters",level:2},{value:"<code>reducer</code>",id:"reducer",level:3},{value:"<code>middleware</code>",id:"middleware",level:3},{value:"<code>devTools</code>",id:"devtools",level:3},{value:"<code>trace</code>",id:"trace",level:4},{value:"<code>preloadedState</code>",id:"preloadedstate",level:3},{value:"<code>enhancers</code>",id:"enhancers",level:3},{value:"Usage",id:"usage",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Full Example",id:"full-example",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"\xa0"}),"\n",(0,t.jsx)(n.h1,{id:"configurestore",children:(0,t.jsx)(n.code,{children:"configureStore"})}),"\n",(0,t.jsxs)(n.p,{children:["The standard method for creating a Redux store. It uses the low-level Redux core ",(0,t.jsx)(n.code,{children:"createStore"})," method internally, but wraps that to provide good defaults to the store setup for a better development experience."]}),"\n",(0,t.jsx)(n.h2,{id:"purpose-and-behavior",children:"Purpose and Behavior"}),"\n",(0,t.jsx)(n.p,{children:"A standard Redux store setup typically requires multiple pieces of configuration:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Combining the slice reducers into the root reducer"}),"\n",(0,t.jsx)(n.li,{children:"Creating the middleware enhancer, usually with the thunk middleware or other side effects middleware, as well as middleware that might be used for development checks"}),"\n",(0,t.jsx)(n.li,{children:"Adding the Redux DevTools enhancer, and composing the enhancers together"}),"\n",(0,t.jsxs)(n.li,{children:["Calling ",(0,t.jsx)(n.code,{children:"createStore"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Legacy Redux usage patterns typically required several dozen lines of copy-pasted boilerplate to achieve this."}),"\n",(0,t.jsxs)(n.p,{children:["Redux Toolkit's ",(0,t.jsx)(n.code,{children:"configureStore"})," simplifies that setup process, by doing all that work for you. One call to ",(0,t.jsx)(n.code,{children:"configureStore"})," will:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"combineReducers"})," to combine your slices reducers into the root reducer function"]}),"\n",(0,t.jsxs)(n.li,{children:["Add the thunk middleware and called ",(0,t.jsx)(n.code,{children:"applyMiddleware"})]}),"\n",(0,t.jsx)(n.li,{children:"In development, automatically add more middleware to check for common mistakes like accidentally mutating the state"}),"\n",(0,t.jsx)(n.li,{children:"Automatically set up the Redux DevTools Extension connection"}),"\n",(0,t.jsxs)(n.li,{children:["Call ",(0,t.jsx)(n.code,{children:"createStore"})," to create a Redux store using that root reducer and those configuration options"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureStore"})," also offers an improved API and usage patterns compared to the original ",(0,t.jsx)(n.code,{children:"createStore"})," by accepting named fields for ",(0,t.jsx)(n.code,{children:"reducer"}),", ",(0,t.jsx)(n.code,{children:"preloadedState"}),", ",(0,t.jsx)(n.code,{children:"middleware"}),", ",(0,t.jsx)(n.code,{children:"enhancers"}),", and ",(0,t.jsx)(n.code,{children:"devtools"}),", as well as much better TS type inference."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureStore"})," accepts a single configuration object parameter, with the following options:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"\ninterface ConfigureStoreOptions<\n  S = any,\n  A extends Action = UnknownAction,\n  M extends Tuple<Middlewares<S>> = Tuple<Middlewares<S>>\n  E extends Tuple<Enhancers> = Tuple<Enhancers>,\n  P = S\n> {\n  /**\n   * A single reducer function that will be used as the root reducer, or an\n   * object of slice reducers that will be passed to `combineReducers()`.\n   */\n  reducer: Reducer<S, A, P> | ReducersMapObject<S, A, P>\n\n  /**\n   * An array of Redux middleware to install. If not supplied, defaults to\n   * the set of middleware returned by `getDefaultMiddleware()`.\n   */\n  middleware?: ((getDefaultMiddleware: CurriedGetDefaultMiddleware<S>) => M) | M\n\n  /**\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\n   *\n   * Additional configuration can be done by passing Redux DevTools options\n   */\n  devTools?: boolean | DevToolsOptions\n\n  /**\n   * The initial state, same as Redux's createStore.\n   * You may optionally specify it to hydrate the state\n   * from the server in universal apps, or to restore a previously serialized\n   * user session. If you use `combineReducers()` to produce the root reducer\n   * function (either directly or indirectly by passing an object as `reducer`),\n   * this must be an object with the same shape as the reducer map keys.\n   */\n  preloadedState?: P\n\n  /**\n   * The store enhancers to apply. See Redux's `createStore()`.\n   * All enhancers will be included before the DevTools Extension enhancer.\n   * If you need to customize the order of enhancers, supply a callback\n   * function that will receive the getDefaultEnhancers,\n   * and should return a new array (such as `getDefaultEnhancers().concat(offline)`).\n   * If you only need to add middleware, you can use the `middleware` parameter instead.\n   */\n  enhancers?: (getDefaultEnhancers: GetDefaultEnhancers<M>) => E | E\n}\n\nfunction configureStore<\n  S = any,\n  A extends Action = UnknownAction,\n  M extends Tuple<Middlewares<S>> = Tuple<Middlewares<S>>\n  E extends Tuple<Enhancers> = Tuple<Enhancers>,\n  P = S\n>(options: ConfigureStoreOptions<S, A, M, E, P>): EnhancedStore<S, A, M, E>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reducer",children:(0,t.jsx)(n.code,{children:"reducer"})}),"\n",(0,t.jsx)(n.p,{children:"If this is a single function, it will be directly used as the root reducer for the store."}),"\n",(0,t.jsxs)(n.p,{children:["If it is an object of slice reducers, like ",(0,t.jsx)(n.code,{children:"{users : usersReducer, posts : postsReducer}"}),",\n",(0,t.jsx)(n.code,{children:"configureStore"})," will automatically create the root reducer by passing this object to the\n",(0,t.jsxs)(n.a,{href:"https://redux.js.org/api/combinereducers",children:["Redux ",(0,t.jsx)(n.code,{children:"combineReducers"})," utility"]}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"middleware",children:(0,t.jsx)(n.code,{children:"middleware"})}),"\n",(0,t.jsxs)(n.p,{children:["A callback which will receive ",(0,t.jsx)(n.code,{children:"getDefaultMiddleware"})," as its argument,\nand should return a middleware array."]}),"\n",(0,t.jsxs)(n.p,{children:["If this option is provided, it should return all the middleware functions you\nwant added to the store. ",(0,t.jsx)(n.code,{children:"configureStore"})," will automatically pass those to ",(0,t.jsx)(n.code,{children:"applyMiddleware"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If not provided, ",(0,t.jsx)(n.code,{children:"configureStore"})," will call ",(0,t.jsx)(n.code,{children:"getDefaultMiddleware"})," and use the\narray of middleware functions it returns."]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on how the ",(0,t.jsx)(n.code,{children:"middleware"})," parameter works and the list of middleware that are added by default, see the\n",(0,t.jsxs)(n.a,{href:"/api/getDefaultMiddleware",children:[(0,t.jsx)(n.code,{children:"getDefaultMiddleware"})," docs page"]}),"."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Tuple",type:"note",children:[(0,t.jsxs)(n.p,{children:["Typescript users are required to use a ",(0,t.jsx)(n.code,{children:"Tuple"})," instance (if not using a ",(0,t.jsx)(n.code,{children:"getDefaultMiddleware"})," result, which is already a ",(0,t.jsx)(n.code,{children:"Tuple"}),"), for better inference."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"import { configureStore, Tuple } from '@reduxjs/toolkit'\n\nconfigureStore({\n  reducer: rootReducer,\n  middleware: () => new Tuple(additionalMiddleware, logger),\n})\n"})}),(0,t.jsx)(n.p,{children:"Javascript-only users are free to use a plain array if preferred."})]}),"\n",(0,t.jsx)(n.h3,{id:"devtools",children:(0,t.jsx)(n.code,{children:"devTools"})}),"\n",(0,t.jsxs)(n.p,{children:["If this is a boolean, it will be used to indicate whether ",(0,t.jsx)(n.code,{children:"configureStore"})," should automatically enable support for ",(0,t.jsx)(n.a,{href:"https://github.com/reduxjs/redux-devtools",children:"the Redux DevTools browser extension"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If it is an object, then the DevTools Extension will be enabled, and the options object will be passed to ",(0,t.jsx)(n.code,{children:"composeWithDevtools()"}),". See\nthe DevTools Extension docs for ",(0,t.jsx)(n.a,{href:"https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md",children:(0,t.jsx)(n.code,{children:"EnhancerOptions"})})," for\na list of the specific options that are available."]}),"\n",(0,t.jsxs)(n.p,{children:["Defaults to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"trace",children:(0,t.jsx)(n.code,{children:"trace"})}),"\n",(0,t.jsxs)(n.p,{children:["The Redux DevTools Extension recently added ",(0,t.jsx)(n.a,{href:"https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/Features/Trace.md",children:"support for showing action stack traces"})," that show exactly where each action was dispatched.\nCapturing the traces can add a bit of overhead, so the DevTools Extension allows users to configure whether action stack traces are captured by ",(0,t.jsx)(n.a,{href:"https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md#trace",children:"setting the 'trace' argument"}),".\nIf the DevTools are enabled by passing ",(0,t.jsx)(n.code,{children:"true"})," or an object, then ",(0,t.jsx)(n.code,{children:"configureStore"})," will default to enabling capturing action stack traces in development mode only."]}),"\n",(0,t.jsx)(n.h3,{id:"preloadedstate",children:(0,t.jsx)(n.code,{children:"preloadedState"})}),"\n",(0,t.jsxs)(n.p,{children:["An optional initial state value to be passed to the Redux ",(0,t.jsx)(n.code,{children:"createStore"})," function."]}),"\n",(0,t.jsx)(n.h3,{id:"enhancers",children:(0,t.jsx)(n.code,{children:"enhancers"})}),"\n",(0,t.jsx)(n.p,{children:"A callback function to customize the array of enhancers."}),"\n",(0,t.jsxs)(n.p,{children:["Enhancers returned by this callback will be passed to ",(0,t.jsxs)(n.a,{href:"https://redux.js.org/api/compose",children:["the Redux ",(0,t.jsx)(n.code,{children:"compose"})," function"]}),", and the combined enhancer will be passed to ",(0,t.jsx)(n.code,{children:"createStore"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Dev Tools",type:"tip",children:[(0,t.jsxs)(n.p,{children:["This should ",(0,t.jsx)(n.em,{children:"not"})," include the Redux DevTools Extension ",(0,t.jsx)(n.code,{children:"composeWithDevTools"}),", as this is already handled by ",(0,t.jsx)(n.code,{children:"configureStore"}),"."]}),(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.code,{children:"enhancers: () => new Tuple(offline)"})," will result in a final setup of ",(0,t.jsx)(n.code,{children:"[offline, devToolsExtension]"}),"."]})]}),"\n",(0,t.jsxs)(n.p,{children:["If not provided, ",(0,t.jsx)(n.code,{children:"configureStore"})," will call ",(0,t.jsx)(n.code,{children:"getDefaultEnhancers"})," and use the array of enhancers it returns (including ",(0,t.jsx)(n.code,{children:"applyMiddleware"})," with specified middleware)."]}),"\n",(0,t.jsxs)(n.p,{children:["Where you wish to add onto or customize the default enhancers, you may pass a callback function that will receive ",(0,t.jsx)(n.code,{children:"getDefaultEnhancers"})," as its argument, and should return an enhancer array."]}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.code,{children:"enhancers: (defaultEnhancers) => defaultEnhancers.prepend(offline)"})," will result in a final setup\nof ",(0,t.jsx)(n.code,{children:"[offline, applyMiddleware, devToolsExtension]"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For more details on how the ",(0,t.jsx)(n.code,{children:"enhancer"})," parameter works and the list of enhancers that are added by default, see the ",(0,t.jsxs)(n.a,{href:"./getDefaultEnhancers",children:[(0,t.jsx)(n.code,{children:"getDefaultEnhancers"})," docs page"]}),"."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Middleware",type:"caution",children:[(0,t.jsxs)(n.p,{children:["If you don't use ",(0,t.jsx)(n.code,{children:"getDefaultEnhancers"})," and instead return an array, the ",(0,t.jsx)(n.code,{children:"applyMiddleware"})," enhancer will ",(0,t.jsx)(n.em,{children:"not"})," be used."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureStore"})," will warn in console if any middleware are provided (or left as default) but not included in the final list of enhancers."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"// warns - middleware customised but not included in final enhancers\nconfigureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger)\n  enhancers: [offline(offlineConfig)],\n})\n\n// fine - default enhancers included\nconfigureStore({\n  reducer,\n  enhancers: (getDefaultEnhancers) => getDefaultEnhancers().concat(offline(offlineConfig)),\n})\n\n// also allowed\nconfigureStore({\n  reducer,\n  middleware: () => [],\n  enhancers: () => [offline(offlineConfig)],\n})\n"})}),(0,t.jsxs)(n.p,{children:["Note that if using Typescript, the ",(0,t.jsx)(n.code,{children:"middleware"})," option is required to be provided ",(0,t.jsx)(n.em,{children:"before"})," the enhancer option, as the type of ",(0,t.jsx)(n.code,{children:"getDefaultEnhancers"})," depends on its result."]})]}),"\n",(0,t.jsxs)(n.admonition,{title:"Tuple",type:"note",children:[(0,t.jsxs)(n.p,{children:["Typescript users are required to use a ",(0,t.jsx)(n.code,{children:"Tuple"})," instance (if not using a ",(0,t.jsx)(n.code,{children:"getDefaultEnhancer"})," result, which is already a ",(0,t.jsx)(n.code,{children:"Tuple"}),"), for better inference."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"import { configureStore, Tuple } from '@reduxjs/toolkit'\n\nconfigureStore({\n  reducer: rootReducer,\n  enhancers: () => new Tuple(offline),\n})\n"})}),(0,t.jsx)(n.p,{children:"Javascript-only users are free to use a plain array if preferred."})]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: reducers.ts noEmit\nimport type { Reducer } from '@reduxjs/toolkit'\ndeclare const rootReducer: Reducer<{}>\nexport default rootReducer\n\n// file: store.ts\nimport { configureStore } from '@reduxjs/toolkit'\n\nimport rootReducer from './reducers'\n\nconst store = configureStore({ reducer: rootReducer })\n// The store now has redux-thunk added and the Redux DevTools Extension is turned on\n"})}),"\n",(0,t.jsx)(n.h3,{id:"full-example",children:"Full Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"// file: todos/todosReducer.ts noEmit\nimport type { Reducer } from '@reduxjs/toolkit'\ndeclare const reducer: Reducer<{}>\nexport default reducer\n\n// file: visibility/visibilityReducer.ts noEmit\nimport type { Reducer } from '@reduxjs/toolkit'\ndeclare const reducer: Reducer<{}>\nexport default reducer\n\n// file: store.ts\nimport { configureStore } from '@reduxjs/toolkit'\n\n// We'll use redux-logger just as an example of adding another middleware\nimport logger from 'redux-logger'\n\n// And use redux-batched-subscribe as an example of adding enhancers\nimport { batchedSubscribe } from 'redux-batched-subscribe'\n\nimport todosReducer from './todos/todosReducer'\nimport visibilityReducer from './visibility/visibilityReducer'\n\nconst reducer = {\n  todos: todosReducer,\n  visibility: visibilityReducer,\n}\n\nconst preloadedState = {\n  todos: [\n    {\n      text: 'Eat food',\n      completed: true,\n    },\n    {\n      text: 'Exercise',\n      completed: false,\n    },\n  ],\n  visibilityFilter: 'SHOW_COMPLETED',\n}\n\nconst debounceNotify = _.debounce((notify) => notify())\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== 'production',\n  preloadedState,\n  enhancers: (getDefaultEnhancers) =>\n    getDefaultEnhancers({\n      autoBatch: false,\n    }).concat(batchedSubscribe(debounceNotify)),\n})\n\n// The store has been created with these options:\n// - The slice reducers were automatically passed to combineReducers()\n// - redux-thunk and redux-logger were added as middleware\n// - The Redux DevTools Extension is disabled for production\n// - The middleware, batched subscribe, and devtools enhancers were composed together\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const o={},d=t.createContext(o);function i(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);