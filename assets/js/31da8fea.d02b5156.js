"use strict";(self.webpackChunkredux_toolkit_zh=self.webpackChunkredux_toolkit_zh||[]).push([[662],{1859:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453);const r={id:"createListenerMiddleware",title:"createListenerMiddleware",sidebar_label:"createListenerMiddleware",hide_title:!0},a="createListenerMiddleware",c={id:"api/createListenerMiddleware",title:"createListenerMiddleware",description:"&nbsp;",source:"@site/docs/api/createListenerMiddleware.mdx",sourceDirName:"api",slug:"/api/createListenerMiddleware",permalink:"/redux-toolkit-zh/api/createListenerMiddleware",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/createListenerMiddleware.mdx",tags:[],version:"current",frontMatter:{id:"createListenerMiddleware",title:"createListenerMiddleware",sidebar_label:"createListenerMiddleware",hide_title:!0},sidebar:"docs",previous:{title:"Action Creator Middleware",permalink:"/redux-toolkit-zh/api/actionCreatorMiddleware"},next:{title:"createDynamicMiddleware",permalink:"/redux-toolkit-zh/api/createDynamicMiddleware"}},o={},l=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"<code>createListenerMiddleware</code>",id:"createlistenermiddleware-1",level:2},{value:"Middleware Options",id:"middleware-options",level:3},{value:"Listener Middleware Instance",id:"listener-middleware-instance",level:2},{value:"<code>middleware</code>",id:"middleware",level:3},{value:"<code>startListening</code>",id:"startlistening",level:3},{value:"<code>stopListening</code>",id:"stoplistening",level:3},{value:"<code>clearListeners</code>",id:"clearlisteners",level:3},{value:"Action Creators",id:"action-creators",level:2},{value:"<code>addListener</code>",id:"addlistener",level:3},{value:"<code>removeListener</code>",id:"removelistener",level:3},{value:"<code>clearAllListeners</code>",id:"clearalllisteners",level:3},{value:"Listener API",id:"listener-api",level:2},{value:"Store Interaction Methods",id:"store-interaction-methods",level:3},{value:"Listener Subscription Management",id:"listener-subscription-management",level:3},{value:"Conditional Workflow Execution",id:"conditional-workflow-execution",level:3},{value:"Child Tasks",id:"child-tasks",level:3},{value:"TypeScript Usage",id:"typescript-usage",level:2},{value:"Usage Guide",id:"usage-guide",level:2},{value:"Overall Purpose",id:"overall-purpose",level:3},{value:"Standard Usage Patterns",id:"standard-usage-patterns",level:3},{value:"Writing Async Workflows with Conditions",id:"writing-async-workflows-with-conditions",level:3},{value:"Cancellation and Task Management",id:"cancellation-and-task-management",level:3},{value:"Complex Async Workflows",id:"complex-async-workflows",level:3},{value:"Adding Listeners Inside Components",id:"adding-listeners-inside-components",level:3},{value:"Organizing Listeners in Files",id:"organizing-listeners-in-files",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"\xa0"}),"\n",(0,i.jsx)(n.h1,{id:"createlistenermiddleware",children:(0,i.jsx)(n.code,{children:"createListenerMiddleware"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:'A Redux middleware that lets you define "listener" entries that contain an "effect" callback with additional logic, and a way to specify when that callback should run based on dispatched actions or state changes.'}),"\n",(0,i.jsx)(n.p,{children:"It's intended to be a lightweight alternative to more widely used Redux async middleware like sagas and observables. While similar to thunks in level of complexity and concept, it can be used to replicate some common saga usage patterns."}),"\n",(0,i.jsxs)(n.p,{children:["Conceptually, you can think of this as being similar to React's ",(0,i.jsx)(n.code,{children:"useEffect"})," hook, except that it runs logic in response to Redux store updates instead of component props/state updates."]}),"\n",(0,i.jsxs)(n.p,{children:["Listener effect callbacks have access to ",(0,i.jsx)(n.code,{children:"dispatch"})," and ",(0,i.jsx)(n.code,{children:"getState"}),", similar to thunks. The listener also receives a set of async workflow functions like ",(0,i.jsx)(n.code,{children:"take"}),", ",(0,i.jsx)(n.code,{children:"condition"}),", ",(0,i.jsx)(n.code,{children:"pause"}),", ",(0,i.jsx)(n.code,{children:"fork"}),", and ",(0,i.jsx)(n.code,{children:"unsubscribe"}),", which allow writing more complex async logic."]}),"\n",(0,i.jsxs)(n.p,{children:["Listeners can be defined statically by calling ",(0,i.jsx)(n.code,{children:"listenerMiddleware.startListening()"})," during setup, or added and removed dynamically at runtime with special ",(0,i.jsx)(n.code,{children:"dispatch(addListener())"})," and ",(0,i.jsx)(n.code,{children:"dispatch(removeListener())"})," actions."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { configureStore, createListenerMiddleware } from '@reduxjs/toolkit'\n\nimport todosReducer, {\n  todoAdded,\n  todoToggled,\n  todoDeleted,\n} from '../features/todos/todosSlice'\n\n// Create the middleware instance and methods\nconst listenerMiddleware = createListenerMiddleware()\n\n// Add one or more listener entries that look for specific actions.\n// They may contain any sync or async logic, similar to thunks.\nlistenerMiddleware.startListening({\n  actionCreator: todoAdded,\n  effect: async (action, listenerApi) => {\n    // Run whatever additional side-effect-y logic you want here\n    console.log('Todo added: ', action.payload.text)\n\n    // Can cancel other running instances\n    listenerApi.cancelActiveListeners()\n\n    // Run async logic\n    const data = await fetchData()\n\n    // Pause until action dispatched or state changed\n    if (await listenerApi.condition(matchSomeAction)) {\n      // Use the listener API methods to dispatch, get state,\n      // unsubscribe the listener, start child tasks, and more\n      listenerApi.dispatch(todoAdded('Buy pet food'))\n\n      // Spawn \"child tasks\" that can do more work and return results\n      const task = listenerApi.fork(async (forkApi) => {\n        // Can pause execution\n        await forkApi.delay(5)\n        // Complete the child by returning a value\n        return 42\n      })\n\n      const result = await task.result\n      // Unwrap the child result in the listener\n      if (result.status === 'ok') {\n        // Logs the `42` result value that was returned\n        console.log('Child succeeded: ', result.value)\n      }\n    }\n  },\n})\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  // Add the listener middleware to the store.\n  // NOTE: Since this can receive actions with functions inside,\n  // it should go before the serializability check middleware\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().prepend(listenerMiddleware.middleware),\n})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"createlistenermiddleware-1",children:(0,i.jsx)(n.code,{children:"createListenerMiddleware"})}),"\n",(0,i.jsxs)(n.p,{children:["Creates an instance of the middleware, which should then be added to the store via ",(0,i.jsx)(n.code,{children:"configureStore"}),"'s ",(0,i.jsx)(n.code,{children:"middleware"})," parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const createListenerMiddleware = (options?: CreateMiddlewareOptions) =>\n  ListenerMiddlewareInstance\n\ninterface CreateListenerMiddlewareOptions<ExtraArgument = unknown> {\n  extra?: ExtraArgument\n  onError?: ListenerErrorHandler\n}\n\ntype ListenerErrorHandler = (\n  error: unknown,\n  errorInfo: ListenerErrorInfo,\n) => void\n\ninterface ListenerErrorInfo {\n  raisedBy: 'effect' | 'predicate'\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"middleware-options",children:"Middleware Options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"extra"}),': an optional "extra argument" that will be injected into the ',(0,i.jsx)(n.code,{children:"listenerApi"})," parameter of each listener. Equivalent to ",(0,i.jsx)(n.a,{href:"https://redux.js.org/usage/writing-logic-thunks#injecting-config-values-into-thunks",children:'the "extra argument" in the Redux Thunk middleware'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"onError"}),": an optional error handler that gets called with synchronous and async errors raised by ",(0,i.jsx)(n.code,{children:"listener"})," and synchronous errors thrown by ",(0,i.jsx)(n.code,{children:"predicate"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"listener-middleware-instance",children:"Listener Middleware Instance"}),"\n",(0,i.jsxs)(n.p,{children:['The "listener middleware instance" returned from ',(0,i.jsx)(n.code,{children:"createListenerMiddleware"}),' is an object similar to the "slice" objects generated by ',(0,i.jsx)(n.code,{children:"createSlice"}),". The instance object is ",(0,i.jsx)(n.em,{children:"not"})," the actual Redux middleware itself. Rather, it contains the middleware and some instance methods used to add and remove listener entries within the middleware."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"interface ListenerMiddlewareInstance<\n  State = unknown,\n  Dispatch extends ThunkDispatch<State, unknown, UnknownAction> = ThunkDispatch<\n    State,\n    unknown,\n    UnknownAction\n  >,\n  ExtraArgument = unknown,\n> {\n  middleware: ListenerMiddleware<State, Dispatch, ExtraArgument>\n  startListening: (options: AddListenerOptions) => Unsubscribe\n  stopListening: (\n    options: AddListenerOptions & UnsubscribeListenerOptions,\n  ) => boolean\n  clearListeners: () => void\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"middleware",children:(0,i.jsx)(n.code,{children:"middleware"})}),"\n",(0,i.jsxs)(n.p,{children:["The actual Redux middleware. Add this to the Redux store via ",(0,i.jsxs)(n.a,{href:"/redux-toolkit-zh/api/configureStore#middleware",children:["the ",(0,i.jsx)(n.code,{children:"configureStore.middleware"})," option"]}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Since the listener middleware can receive "add" and "remove" actions containing functions, this should normally be added as the first middleware in the chain so that it is before the serializability check middleware.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const store = configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  // Add the listener middleware to the store.\n  // NOTE: Since this can receive actions with functions inside,\n  // it should go before the serializability check middleware\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().prepend(listenerMiddleware.middleware),\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"startlistening",children:(0,i.jsx)(n.code,{children:"startListening"})}),"\n",(0,i.jsx)(n.p,{children:'Adds a new listener entry to the middleware. Typically used to "statically" add new listeners during application setup.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const startListening = (options: AddListenerOptions) => UnsubscribeListener\n\ninterface AddListenerOptions {\n  // Four options for deciding when the listener will run:\n\n  // 1) Exact action type string match\n  type?: string\n\n  // 2) Exact action type match based on the RTK action creator\n  actionCreator?: ActionCreator\n\n  // 3) Match one of many actions using an RTK matcher\n  matcher?: Matcher\n\n  // 4) Return true based on a combination of action + state\n  predicate?: ListenerPredicate\n\n  // The actual callback to run when the action is matched\n  effect: (action: Action, listenerApi: ListenerApi) => void | Promise<void>\n}\n\ntype ListenerPredicate<Action extends ReduxAction, State> = (\n  action: Action,\n  currentState?: State,\n  originalState?: State,\n) => boolean\n\ntype UnsubscribeListener = (\n  unsubscribeOptions?: UnsubscribeListenerOptions,\n) => void\n\ninterface UnsubscribeListenerOptions {\n  cancelActive?: true\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["You must provide exactly ",(0,i.jsx)(n.em,{children:"one"})," of the four options for deciding when the listener will run: ",(0,i.jsx)(n.code,{children:"type"}),", ",(0,i.jsx)(n.code,{children:"actionCreator"}),", ",(0,i.jsx)(n.code,{children:"matcher"}),", or ",(0,i.jsx)(n.code,{children:"predicate"})]}),". Every time an action is dispatched, each listener will be checked to see if it should run based on the current action vs the comparison option provided."]}),"\n",(0,i.jsx)(n.p,{children:"These are all acceptable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// 1) Action type string\nlistenerMiddleware.startListening({ type: 'todos/todoAdded', effect })\n// 2) RTK action creator\nlistenerMiddleware.startListening({ actionCreator: todoAdded, effect })\n// 3) RTK matcher function\nlistenerMiddleware.startListening({\n  matcher: isAnyOf(todoAdded, todoToggled),\n  effect,\n})\n// 4) Listener predicate\nlistenerMiddleware.startListening({\n  predicate: (action, currentState, previousState) => {\n    // return true when the listener should run\n  },\n  effect,\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"predicate"}),' option actually allows matching solely against state-related checks, such as "did ',(0,i.jsx)(n.code,{children:"state.x"}),' change" or "the current value of ',(0,i.jsx)(n.code,{children:"state.x"}),' matches some criteria", regardless of the actual action.']}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/redux-toolkit-zh/api/matching-utilities",children:'"matcher" utility functions included in RTK'})," are acceptable as either the ",(0,i.jsx)(n.code,{children:"matcher"})," or ",(0,i.jsx)(n.code,{children:"predicate"})," option."]}),"\n",(0,i.jsxs)(n.p,{children:["The return value is an ",(0,i.jsx)(n.code,{children:"unsubscribe()"})," callback that will remove this listener. By default, unsubscribing will ",(0,i.jsx)(n.em,{children:"not"})," cancel any active instances of the listener. However, you may also pass in ",(0,i.jsx)(n.code,{children:"{cancelActive: true}"})," to cancel running instances."]}),"\n",(0,i.jsxs)(n.p,{children:["If you try to add a listener entry but another entry with this exact function reference already exists, no new entry will be added, and the existing ",(0,i.jsx)(n.code,{children:"unsubscribe"})," method will be returned."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"effect"}),' callback will receive the current action as its first argument, as well as a "listener API" object similar to the "thunk API" object in ',(0,i.jsx)(n.code,{children:"createAsyncThunk"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["All listener predicates and callbacks are checked ",(0,i.jsx)(n.em,{children:"after"})," the root reducer has already processed the action and updated the state. The ",(0,i.jsx)(n.code,{children:"listenerApi.getOriginalState()"})," method can be used to get the state value that existed before the action that triggered this listener was processed."]}),"\n",(0,i.jsx)(n.h3,{id:"stoplistening",children:(0,i.jsx)(n.code,{children:"stopListening"})}),"\n",(0,i.jsx)(n.p,{children:"Removes a given listener entry."}),"\n",(0,i.jsxs)(n.p,{children:["It accepts the same arguments as ",(0,i.jsx)(n.code,{children:"startListening()"}),". It checks for an existing listener entry by comparing the function references of ",(0,i.jsx)(n.code,{children:"listener"})," and the provided ",(0,i.jsx)(n.code,{children:"actionCreator/matcher/predicate"})," function or ",(0,i.jsx)(n.code,{children:"type"})," string."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, this does ",(0,i.jsx)(n.em,{children:"not"})," cancel any active running instances. However, you may also pass in ",(0,i.jsx)(n.code,{children:"{cancelActive: true}"})," to cancel running instances."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const stopListening = (\n  options: AddListenerOptions & UnsubscribeListenerOptions,\n) => boolean\n\ninterface UnsubscribeListenerOptions {\n  cancelActive?: true\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"true"})," if the listener entry has been removed, or ",(0,i.jsx)(n.code,{children:"false"})," if no subscription matching the input provided has been found."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Examples:\n// 1) Action type string\nlistenerMiddleware.stopListening({\n  type: 'todos/todoAdded',\n  listener,\n  cancelActive: true,\n})\n// 2) RTK action creator\nlistenerMiddleware.stopListening({ actionCreator: todoAdded, effect })\n// 3) RTK matcher function\nlistenerMiddleware.stopListening({ matcher, effect, cancelActive: true })\n// 4) Listener predicate\nlistenerMiddleware.stopListening({ predicate, effect })\n"})}),"\n",(0,i.jsx)(n.h3,{id:"clearlisteners",children:(0,i.jsx)(n.code,{children:"clearListeners"})}),"\n",(0,i.jsx)(n.p,{children:"Removes all current listener entries. It also cancels all active running instances of those listeners as well."}),"\n",(0,i.jsx)(n.p,{children:"This is most likely useful for test scenarios where a single middleware or store instance might be used in multiple tests, as well as some app cleanup situations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"const clearListeners = () => void;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"action-creators",children:"Action Creators"}),"\n",(0,i.jsx)(n.p,{children:'In addition to adding and removing listeners by directly calling methods on the listener instance, you can dynamically add and remove listeners at runtime by dispatching special "add" and "remove" actions. These are exported from the main RTK package as standard RTK-generated action creators.'}),"\n",(0,i.jsx)(n.h3,{id:"addlistener",children:(0,i.jsx)(n.code,{children:"addListener"})}),"\n",(0,i.jsxs)(n.p,{children:["A standard RTK action creator, imported from the package. Dispatching this action tells the middleware to dynamically add a new listener at runtime. It accepts exactly the same options as ",(0,i.jsx)(n.code,{children:"startListening()"})]}),"\n",(0,i.jsxs)(n.p,{children:["Dispatching this action returns an ",(0,i.jsx)(n.code,{children:"unsubscribe()"})," callback from ",(0,i.jsx)(n.code,{children:"dispatch"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Per above, provide `predicate` or any of the other comparison options\nconst unsubscribe = store.dispatch(addListener({ predicate, effect }))\n"})}),"\n",(0,i.jsx)(n.h3,{id:"removelistener",children:(0,i.jsx)(n.code,{children:"removeListener"})}),"\n",(0,i.jsxs)(n.p,{children:["A standard RTK action creator, imported from the package. Dispatching this action tells the middleware to dynamically remove a listener at runtime. Accepts the same arguments as ",(0,i.jsx)(n.code,{children:"stopListening()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, this does ",(0,i.jsx)(n.em,{children:"not"})," cancel any active running instances. However, you may also pass in ",(0,i.jsx)(n.code,{children:"{cancelActive: true}"})," to cancel running instances."]}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"true"})," if the listener entry has been removed, ",(0,i.jsx)(n.code,{children:"false"})," if no subscription matching the input provided has been found."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const wasRemoved = store.dispatch(\n  removeListener({ predicate, effect, cancelActive: true }),\n)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"clearalllisteners",children:(0,i.jsx)(n.code,{children:"clearAllListeners"})}),"\n",(0,i.jsx)(n.p,{children:"A standard RTK action creator, imported from the package. Dispatching this action tells the middleware to remove all current listener entries. It also cancels all active running instances of those listeners as well."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"store.dispatch(clearAllListeners())\n"})}),"\n",(0,i.jsx)(n.h2,{id:"listener-api",children:"Listener API"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"listenerApi"})," object is the second argument to each listener callback. It contains several utility functions that may be called anywhere inside the listener's logic."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"export interface ListenerEffectAPI<\n  State,\n  Dispatch extends ReduxDispatch<UnknownAction>,\n  ExtraArgument = unknown,\n> extends MiddlewareAPI<Dispatch, State> {\n  // NOTE: MiddlewareAPI contains `dispatch` and `getState` already\n\n  /**\n   * Returns the store state as it existed when the action was originally dispatched, _before_ the reducers ran.\n   * This function can **only** be invoked **synchronously**, it throws error otherwise.\n   */\n  getOriginalState: () => State\n  /**\n   * Removes the listener entry from the middleware and prevent future instances of the listener from running.\n   * It does **not** cancel any active instances.\n   */\n  unsubscribe(): void\n  /**\n   * It will subscribe a listener if it was previously removed, noop otherwise.\n   */\n  subscribe(): void\n  /**\n   * Returns a promise that resolves when the input predicate returns `true` or\n   * rejects if the listener has been cancelled or is completed.\n   *\n   * The return value is `true` if the predicate succeeds or `false` if a timeout is provided and expires first.\n   */\n  condition: ConditionFunction<State>\n  /**\n   * Returns a promise that resolves when the input predicate returns `true` or\n   * rejects if the listener has been cancelled or is completed.\n   *\n   * The return value is the `[action, currentState, previousState]` combination that the predicate saw as arguments.\n   *\n   * The promise resolves to null if a timeout is provided and expires first.\n   */\n  take: TakePattern<State>\n  /**\n   * Cancels all other running instances of this same listener except for the one that made this call.\n   */\n  cancelActiveListeners: () => void\n  /**\n   * Cancels the listener instance that made this call.\n   */\n  cancel: () => void\n  /**\n   * Throws a `TaskAbortError` if this listener has been cancelled\n   */\n  throwIfCancelled: () => void\n  /**\n   * An abort signal whose `aborted` property is set to `true`\n   * if the listener execution is either aborted or completed.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n   */\n  signal: AbortSignal\n  /**\n   * Returns a promise that resolves after `timeoutMs` or\n   * rejects if the listener has been cancelled or is completed.\n   */\n  delay(timeoutMs: number): Promise<void>\n  /**\n   * Queues in the next microtask the execution of a task.\n   */\n  fork<T>(executor: ForkedTaskExecutor<T>): ForkedTask<T>\n  /**\n   * Returns a promise that resolves when `waitFor` resolves or\n   * rejects if the listener has been cancelled or is completed.\n   * @param promise\n   */\n  pause<M>(promise: Promise<M>): Promise<M>\n  extra: ExtraArgument\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"These can be divided into several categories."}),"\n",(0,i.jsx)(n.h3,{id:"store-interaction-methods",children:"Store Interaction Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dispatch: Dispatch"}),": the standard ",(0,i.jsx)(n.code,{children:"store.dispatch"})," method"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getState: () => State"}),": the standard ",(0,i.jsx)(n.code,{children:"store.getState"})," method"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getOriginalState: () => State"}),": returns the store state as it existed when the action was originally dispatched, ",(0,i.jsx)(n.em,{children:"before"})," the reducers ran. (",(0,i.jsx)(n.strong,{children:"Note"}),": this method can only be called synchronously, during the initial dispatch call stack, to avoid memory leaks. Calling it asynchronously will throw an error.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"extra: unknown"}),': the "extra argument" that was provided as part of the middleware setup, if any']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dispatch"})," and ",(0,i.jsx)(n.code,{children:"getState"})," are exactly the same as in a thunk. ",(0,i.jsx)(n.code,{children:"getOriginalState"})," can be used to compare the original state before the listener was started."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"extra"})," can be used to inject a value such as an API service layer into the middleware at creation time, and is accessible here."]}),"\n",(0,i.jsx)(n.h3,{id:"listener-subscription-management",children:"Listener Subscription Management"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"unsubscribe: () => void"}),": removes the listener entry from the middleware, and prevent future instances of the listener from running. (This does ",(0,i.jsx)(n.em,{children:"not"})," cancel any active instances.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"subscribe: () => void"}),": will re-subscribe the listener entry if it was previously removed, or no-op if currently subscribed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cancelActiveListeners: () => void"}),": cancels all other running instances of this same listener ",(0,i.jsx)(n.em,{children:"except"})," for the one that made this call. (The cancellation will only have a meaningful effect if the other instances are paused using one of the cancellation-aware APIs like ",(0,i.jsx)(n.code,{children:"take/cancel/pause/delay"}),' - see "Cancelation and Task Management" in the "Usage" section for more details)']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cancel: () => void"}),": cancels the instance of this listener that made this call."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"throwIfCancelled: () => void"}),": throws a ",(0,i.jsx)(n.code,{children:"TaskAbortError"})," if the current listener instance was cancelled."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"signal: AbortSignal"}),": An ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal",children:(0,i.jsx)(n.code,{children:"AbortSignal"})})," whose ",(0,i.jsx)(n.code,{children:"aborted"})," property will be set to ",(0,i.jsx)(n.code,{children:"true"})," if the listener execution is aborted or completed."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Dynamically unsubscribing and re-subscribing this listener allows for more complex async workflows, such as avoiding duplicate running instances by calling ",(0,i.jsx)(n.code,{children:"listenerApi.unsubscribe()"})," at the start of a listener, or calling ",(0,i.jsx)(n.code,{children:"listenerApi.cancelActiveListeners()"})," to ensure that only the most recent instance is allowed to complete."]}),"\n",(0,i.jsx)(n.h3,{id:"conditional-workflow-execution",children:"Conditional Workflow Execution"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"take: (predicate: ListenerPredicate, timeout?: number) => Promise<[Action, State, State] | null>"}),": returns a promise that will resolve when the ",(0,i.jsx)(n.code,{children:"predicate"})," returns ",(0,i.jsx)(n.code,{children:"true"}),". The return value is the ",(0,i.jsx)(n.code,{children:"[action, currentState, previousState]"})," combination that the predicate saw as arguments. If a ",(0,i.jsx)(n.code,{children:"timeout"})," is provided and expires first, the promise resolves to ",(0,i.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"condition: (predicate: ListenerPredicate, timeout?: number) => Promise<boolean>"}),": Similar to ",(0,i.jsx)(n.code,{children:"take"}),", but resolves to ",(0,i.jsx)(n.code,{children:"true"})," if the predicate succeeds, and ",(0,i.jsx)(n.code,{children:"false"})," if a ",(0,i.jsx)(n.code,{children:"timeout"}),' is provided and expires first. This allows async logic to pause and wait for some condition to occur before continuing. See "Writing Async Workflows" below for details on usage.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"delay: (timeoutMs: number) => Promise<void>"}),": returns a cancellation-aware promise that resolves after the timeout, or rejects if cancelled before the expiration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pause: (promise: Promise<T>) => Promise<T>"}),": accepts any promise, and returns a cancellation-aware promise that either resolves with the argument promise or rejects if cancelled before the resolution"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These methods provide the ability to write conditional logic based on future dispatched actions and state changes. Both also accept an optional ",(0,i.jsx)(n.code,{children:"timeout"})," in milliseconds."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"take"})," resolves to a ",(0,i.jsx)(n.code,{children:"[action, currentState, previousState]"})," tuple or ",(0,i.jsx)(n.code,{children:"null"})," if it timed out, whereas ",(0,i.jsx)(n.code,{children:"condition"})," resolves to ",(0,i.jsx)(n.code,{children:"true"})," if it succeeded or ",(0,i.jsx)(n.code,{children:"false"})," if timed out."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"take"}),' is meant for "wait for an action and get its contents", while ',(0,i.jsx)(n.code,{children:"condition"})," is meant for checks like ",(0,i.jsx)(n.code,{children:"if (await condition(predicate))"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Both these methods are cancellation-aware, and will throw a ",(0,i.jsx)(n.code,{children:"TaskAbortError"})," if the listener instance is cancelled while paused."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that both ",(0,i.jsx)(n.code,{children:"take"})," and ",(0,i.jsx)(n.code,{children:"condition"})," will only resolve ",(0,i.jsx)(n.strong,{children:"after the next action"})," has been dispatched. They do not resolve immediately even if their predicate would return true for the current state."]}),"\n",(0,i.jsx)(n.h3,{id:"child-tasks",children:"Child Tasks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fork: (executor: (forkApi: ForkApi) => T | Promise<T>) => ForkedTask<T>"}),': Launches a "child task" that may be used to accomplish additional work. Accepts any sync or async function as its argument, and returns a ',(0,i.jsx)(n.code,{children:"{result, cancel}"})," object that can be used to check the final status and return value of the child task, or cancel it while in-progress."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Child tasks can be launched, and waited on to collect their return values. The provided ",(0,i.jsx)(n.code,{children:"executor"})," function will be called asynchronously with a ",(0,i.jsx)(n.code,{children:"forkApi"})," object containing ",(0,i.jsx)(n.code,{children:"{pause, delay, signal}"}),", allowing it to pause or check cancellation status. It can also make use of the ",(0,i.jsx)(n.code,{children:"listenerApi"})," from the listener's scope."]}),"\n",(0,i.jsxs)(n.p,{children:["An example of this might be a listener that forks a child task containing an infinite loop that listens for events from a server. The parent then uses ",(0,i.jsx)(n.code,{children:"listenerApi.condition()"}),' to wait for a "stop" action, and cancels the child task.']}),"\n",(0,i.jsx)(n.p,{children:"The task and result types are:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"interface ForkedTaskAPI {\n  pause<W>(waitFor: Promise<W>): Promise<W>\n  delay(timeoutMs: number): Promise<void>\n  signal: AbortSignal\n}\n\nexport type TaskResolved<T> = {\n  readonly status: 'ok'\n  readonly value: T\n}\n\nexport type TaskRejected = {\n  readonly status: 'rejected'\n  readonly error: unknown\n}\n\nexport type TaskCancelled = {\n  readonly status: 'cancelled'\n  readonly error: TaskAbortError\n}\n\nexport type TaskResult<Value> =\n  | TaskResolved<Value>\n  | TaskRejected\n  | TaskCancelled\n\nexport interface ForkedTask<T> {\n  result: Promise<TaskResult<T>>\n  cancel(): void\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"typescript-usage",children:"TypeScript Usage"}),"\n",(0,i.jsxs)(n.p,{children:["The middleware code is fully TS-typed. However, the ",(0,i.jsx)(n.code,{children:"startListening"})," and ",(0,i.jsx)(n.code,{children:"addListener"})," functions do not know what the store's ",(0,i.jsx)(n.code,{children:"RootState"})," type looks like by default, so ",(0,i.jsx)(n.code,{children:"getState()"})," will return ",(0,i.jsx)(n.code,{children:"unknown"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:['To fix this, the middleware provides types for defining "pre-typed" versions of those methods, similar to the pattern used for defing pre-typed React-Redux hooks. We specifically recommend creating the middleware instance in a separate file from the actual ',(0,i.jsx)(n.code,{children:"configureStore()"})," call:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"// listenerMiddleware.ts\nimport { createListenerMiddleware, addListener } from '@reduxjs/toolkit'\nimport type { RootState, AppDispatch } from './store'\n\nexport const listenerMiddleware = createListenerMiddleware()\n\nexport const startAppListening = listenerMiddleware.startListening.withTypes<\n  RootState,\n  AppDispatch\n>()\n\nexport const addAppListener = addListener.withTypes<RootState, AppDispatch>()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then import and use those pre-typed methods in your components."}),"\n",(0,i.jsx)(n.h2,{id:"usage-guide",children:"Usage Guide"}),"\n",(0,i.jsx)(n.h3,{id:"overall-purpose",children:"Overall Purpose"}),"\n",(0,i.jsx)(n.p,{children:"This middleware lets you run additional logic when some action is dispatched, as a lighter-weight alternative to middleware like sagas and observables that have both a heavy runtime bundle cost and a large conceptual overhead."}),"\n",(0,i.jsxs)(n.p,{children:["This middleware is not intended to handle all possible use cases. Like thunks, it provides you with a basic set of primitives (including access to ",(0,i.jsx)(n.code,{children:"dispatch"})," and ",(0,i.jsx)(n.code,{children:"getState"}),"), and gives you freedom to write any sync or async logic you want. This is both a strength (you can do anything!) and a weakness (you can do anything, with no guard rails!)."]}),"\n",(0,i.jsxs)(n.p,{children:["The middleware includes several async workflow primitives that are sufficient to write equivalents to many Redux-Saga effects operators like ",(0,i.jsx)(n.code,{children:"takeLatest"}),", ",(0,i.jsx)(n.code,{children:"takeLeading"}),", and ",(0,i.jsx)(n.code,{children:"debounce"}),", although none of those methods are directly included. (See ",(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux-toolkit/blob/03eafd5236f16574935cdf1c5958e32ee8cf3fbe/packages/toolkit/src/listenerMiddleware/tests/effectScenarios.test.ts#L74-L363",children:"the listener middleware tests file for examples of how to write code equivalent to those effects"}),".)"]}),"\n",(0,i.jsx)(n.h3,{id:"standard-usage-patterns",children:"Standard Usage Patterns"}),"\n",(0,i.jsx)(n.p,{children:'The most common expected usage is "run some logic after a given action was dispatched". For example, you could set up a simple analytics tracker by looking for certain actions and sending extracted data to the server, including pulling user details from the store:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"listenerMiddleware.startListening({\n  matcher: isAnyOf(action1, action2, action3),\n  effect: (action, listenerApi) => {\n    const user = selectUserDetails(listenerApi.getState())\n\n    const { specialData } = action.meta\n\n    analyticsApi.trackUsage(action.type, user, specialData)\n  },\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, the ",(0,i.jsx)(n.code,{children:"predicate"})," option also allows triggering logic when some state value has changed, or when the state matches a particular condition:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"listenerMiddleware.startListening({\n  predicate: (action, currentState, previousState) => {\n    // Trigger logic whenever this field changes\n    return currentState.counter.value !== previousState.counter.value\n  },\n  effect,\n})\n\nlistenerMiddleware.startListening({\n  predicate: (action, currentState, previousState) => {\n    // Trigger logic after every action if this condition is true\n    return currentState.counter.value > 3\n  },\n  effect,\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"You could also implement a generic API fetching capability, where the UI dispatches a plain action describing the type of resource to be requested, and the middleware automatically fetches it and dispatches a result action:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"listenerMiddleware.startListening({\n  actionCreator: resourceRequested,\n  effect: async (action, listenerApi) => {\n    const { name, args } = action.payload\n    listenerApi.dispatch(resourceLoading())\n\n    const res = await serverApi.fetch(`/api/${name}`, ...args)\n    listenerApi.dispatch(resourceLoaded(res.data))\n  },\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["(That said, we would recommend use of RTK Query for any meaningful data fetching behavior - this is primarily an example of what you ",(0,i.jsx)(n.em,{children:"could"})," do in a listener.)"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"listenerApi.unsubscribe"})," method may be used at any time, and will remove the listener from handling any future actions. As an example, you could create a one-shot listener by unconditionally calling ",(0,i.jsx)(n.code,{children:"unsubscribe()"})," in the body - the effect callback would run the first time the relevant action is seen, then immediately unsubscribe and never run again. (The middleware actually uses this technique internally for the ",(0,i.jsx)(n.code,{children:"take/condition"})," methods)"]}),"\n",(0,i.jsx)(n.h3,{id:"writing-async-workflows-with-conditions",children:"Writing Async Workflows with Conditions"}),"\n",(0,i.jsxs)(n.p,{children:["One of the great strengths of both sagas and observables is their support for complex async workflows, including stopping and starting behavior based on specific dispatched actions. However, the weakness is that both require mastering a complex API with many unique operators (effects methods like ",(0,i.jsx)(n.code,{children:"call()"})," and ",(0,i.jsx)(n.code,{children:"fork()"})," for sagas, RxJS operators for observables), and both add a significant amount to application bundle size."]}),"\n",(0,i.jsxs)(n.p,{children:["While the listener middleware is ",(0,i.jsx)(n.em,{children:"not"})," meant to fully replace sagas or observables, it does provide a carefully chosen set of APIs to implement long-running async workflows as well."]}),"\n",(0,i.jsxs)(n.p,{children:["Listeners can use the ",(0,i.jsx)(n.code,{children:"condition"})," and ",(0,i.jsx)(n.code,{children:"take"})," methods in ",(0,i.jsx)(n.code,{children:"listenerApi"})," to wait until some action is dispatched or state check is met. The ",(0,i.jsx)(n.code,{children:"condition"})," method is directly inspired by ",(0,i.jsxs)(n.a,{href:"https://docs.temporal.io/docs/typescript/workflows/#condition",children:["the ",(0,i.jsx)(n.code,{children:"condition"})," function in Temporal.io's workflow API"]})," (credit to ",(0,i.jsx)(n.a,{href:"https://twitter.com/swyx",children:"@swyx"})," for the suggestion!), and ",(0,i.jsx)(n.code,{children:"take"})," is inspired by ",(0,i.jsxs)(n.a,{href:"https://redux-saga.js.org/docs/api#takepattern",children:["the ",(0,i.jsx)(n.code,{children:"take"})," effect from Redux-Saga"]}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The signatures are:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"type ConditionFunction<Action extends ReduxAction, State> = (\n  predicate: ListenerPredicate<Action, State> | (() => boolean),\n  timeout?: number,\n) => Promise<boolean>\n\ntype TakeFunction<Action extends ReduxAction, State> = (\n  predicate: ListenerPredicate<Action, State> | (() => boolean),\n  timeout?: number,\n) => Promise<[Action, State, State] | null>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"await condition(somePredicate)"})," as a way to pause execution of your listener callback until some criteria is met."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"predicate"})," will be called after every action is processed by the reducers, and should return ",(0,i.jsx)(n.code,{children:"true"})," when the condition should resolve. (It is effectively a one-shot listener itself.) If a ",(0,i.jsx)(n.code,{children:"timeout"})," number (in ms) is provided, the promise will resolve ",(0,i.jsx)(n.code,{children:"true"})," if the ",(0,i.jsx)(n.code,{children:"predicate"})," returns first, or ",(0,i.jsx)(n.code,{children:"false"})," if the timeout expires. This allows you to write comparisons like ",(0,i.jsx)(n.code,{children:"if (await condition(predicate, timeout))"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This should enable writing longer-running workflows with more complex async logic, such as ",(0,i.jsx)(n.a,{href:"https://github.com/redux-saga/redux-saga/blob/1ecb1bed867eeafc69757df8acf1024b438a79e0/examples/cancellable-counter/src/sagas/index.js",children:'the "cancellable counter" example from Redux-Saga'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["An example of ",(0,i.jsx)(n.code,{children:"condition"})," usage, from the test suite:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"test('condition method resolves promise when there is a timeout', async () => {\n  let finalCount = 0\n  let listenerStarted = false\n\n  listenerMiddleware.startListening({\n    predicate: (action, currentState: CounterState) => {\n      return increment.match(action) && currentState.value === 0\n    },\n    effect: async (action, listenerApi) => {\n      listenerStarted = true\n      // Wait for either the counter to hit 3, or 50ms to elapse\n      const result = await listenerApi.condition(\n        (action, currentState: CounterState) => {\n          return currentState.value === 3\n        },\n        50,\n      )\n\n      // In this test, we expect the timeout to happen first\n      expect(result).toBe(false)\n      // Save the state for comparison outside the listener\n      const latestState = listenerApi.getState()\n      finalCount = latestState.value\n    },\n  })\n\n  store.dispatch(increment())\n  // The listener should have started right away\n  expect(listenerStarted).toBe(true)\n\n  store.dispatch(increment())\n\n  // If we wait 150ms, the condition timeout will expire first\n  await delay(150)\n  // Update the state one more time to confirm the listener isn't checking it\n  store.dispatch(increment())\n\n  // Handled the state update before the delay, but not after\n  expect(finalCount).toBe(2)\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cancellation-and-task-management",children:"Cancellation and Task Management"}),"\n",(0,i.jsxs)(n.p,{children:["The listener middleware supports cancellation of running listener instances, ",(0,i.jsx)(n.code,{children:"take/condition/pause/delay"}),' functions, and "child tasks", with an implementation based on ',(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortController",children:(0,i.jsx)(n.code,{children:"AbortController"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"listenerApi.pause/delay()"})," functions provide a cancellation-aware way to have the current listener sleep. ",(0,i.jsx)(n.code,{children:"pause()"})," accepts a promise, while ",(0,i.jsx)(n.code,{children:"delay"})," accepts a timeout value. If the listener is cancelled while waiting, a ",(0,i.jsx)(n.code,{children:"TaskAbortError"})," will be thrown. In addition, both ",(0,i.jsx)(n.code,{children:"take"})," and ",(0,i.jsx)(n.code,{children:"condition"})," support cancellation interruption as well."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"listenerApi.cancelActiveListeners()"})," will cancel ",(0,i.jsx)(n.em,{children:"other"})," existing instances that are running, while ",(0,i.jsx)(n.code,{children:"listenerApi.cancel()"})," can be used to cancel the ",(0,i.jsx)(n.em,{children:"current"})," instance (which may be useful from a fork, which could be deeply nested and not able to directly throw a promise to break out of the effect execution). ",(0,i.jsx)(n.code,{children:"listenerAPi.throwIfCancelled()"})," can also be useful to bail out of workflows in case cancellation happened while the effect was doing other work."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"listenerApi.fork()"}),' can used to launch "child tasks" that can do additional work. These can be waited on to collect their results. An example of this might look like:']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"listenerMiddleware.startListening({\n  actionCreator: increment,\n  effect: async (action, listenerApi) => {\n    // Spawn a child task and start it immediately\n    const task = listenerApi.fork(async (forkApi) => {\n      // Artificially wait a bit inside the child\n      await forkApi.delay(5)\n      // Complete the child by returning a value\n      return 42\n    })\n\n    const result = await task.result\n    // Unwrap the child result in the listener\n    if (result.status === 'ok') {\n      // Logs the `42` result value that was returned\n      console.log('Child succeeded: ', result.value)\n    }\n  },\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"complex-async-workflows",children:"Complex Async Workflows"}),"\n",(0,i.jsxs)(n.p,{children:["The provided async workflow primitives (",(0,i.jsx)(n.code,{children:"cancelActiveListeners"}),", ",(0,i.jsx)(n.code,{children:"cancel"}),", ",(0,i.jsx)(n.code,{children:"unsubscribe"}),", ",(0,i.jsx)(n.code,{children:"subscribe"}),", ",(0,i.jsx)(n.code,{children:"take"}),", ",(0,i.jsx)(n.code,{children:"condition"}),", ",(0,i.jsx)(n.code,{children:"pause"}),", ",(0,i.jsx)(n.code,{children:"delay"}),") can be used to implement behavior that is equivalent to many of the more complex async workflow capabilities found in the Redux-Saga library. This includes effects such as ",(0,i.jsx)(n.code,{children:"throttle"}),", ",(0,i.jsx)(n.code,{children:"debounce"}),", ",(0,i.jsx)(n.code,{children:"takeLatest"}),", ",(0,i.jsx)(n.code,{children:"takeLeading"}),", and ",(0,i.jsx)(n.code,{children:"fork/join"}),". Some examples from the test suite:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"test('debounce / takeLatest', async () => {\n  // Repeated calls cancel previous ones, no work performed\n  // until the specified delay elapses without another call\n  // NOTE: This is also basically identical to `takeLatest`.\n  // Ref: https://redux-saga.js.org/docs/api#debouncems-pattern-saga-args\n  // Ref: https://redux-saga.js.org/docs/api#takelatestpattern-saga-args\n\n  listenerMiddleware.startListening({\n    actionCreator: increment,\n    effect: async (action, listenerApi) => {\n      // Cancel any in-progress instances of this listener\n      listenerApi.cancelActiveListeners()\n\n      // Delay before starting actual work\n      await listenerApi.delay(15)\n\n      // do work here\n    },\n  })\n}\n\ntest('takeLeading', async () => {\n  // Starts listener on first action, ignores others until task completes\n  // Ref: https://redux-saga.js.org/docs/api#takeleadingpattern-saga-args\n\n  listenerMiddleware.startListening({\n    actionCreator: increment,\n    effect: async (action, listenerApi) => {\n      listenerCalls++\n\n      // Stop listening for this action\n      listenerApi.unsubscribe()\n\n      // Pretend we're doing expensive work\n\n      // Re-enable the listener\n      listenerApi.subscribe()\n    },\n  })\n})\n\ntest('cancelled', async () => {\n  // cancelled allows checking if the current task was cancelled\n  // Ref: https://redux-saga.js.org/docs/api#cancelled\n\n  let canceledAndCaught = false\n  let canceledCheck = false\n\n  // Example of canceling prior instances conditionally and checking cancellation\n  listenerMiddleware.startListening({\n    matcher: isAnyOf(increment, decrement, incrementByAmount),\n    effect: async (action, listenerApi) => {\n      if (increment.match(action)) {\n        // Have this branch wait around to be cancelled by the other\n        try {\n          await listenerApi.delay(10)\n        } catch (err) {\n          // Can check cancellation based on the exception and its reason\n          if (err instanceof TaskAbortError) {\n            canceledAndCaught = true\n          }\n        }\n      } else if (incrementByAmount.match(action)) {\n        // do a non-cancellation-aware wait\n        await delay(15)\n        if (listenerApi.signal.aborted) {\n          canceledCheck = true\n        }\n      } else if (decrement.match(action)) {\n        listenerApi.cancelActiveListeners()\n      }\n    },\n  })\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As a more practical example: ",(0,i.jsx)(n.a,{href:"https://gist.github.com/markerikson/5203e71a69fa9dff203c9e27c3d84154",children:'this saga-based "long polling" loop'}),' repeatedly asks the server for a message and then processes each response. The child loop is started on demand when a "start polling" action is dispatched, and the loop is cancelled when a "stop polling" action is dispatched.']}),"\n",(0,i.jsx)(n.p,{children:"That approach can be implemented via the listener middleware:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:"no-transpile",children:"// Track how many times each message was processed by the loop\nconst receivedMessages = {\n  a: 0,\n  b: 0,\n  c: 0,\n}\n\nconst eventPollingStarted = createAction('serverPolling/started')\nconst eventPollingStopped = createAction('serverPolling/stopped')\n\nlistenerMiddleware.startListening({\n  actionCreator: eventPollingStarted,\n  effect: async (action, listenerApi) => {\n    // Only allow one instance of this listener to run at a time\n    listenerApi.unsubscribe()\n\n    // Start a child job that will infinitely loop receiving messages\n    const pollingTask = listenerApi.fork(async (forkApi) => {\n      try {\n        while (true) {\n          // Cancellation-aware pause for a new server message\n          const serverEvent = await forkApi.pause(pollForEvent())\n          // Process the message. In this case, just count the times we've seen this message.\n          if (serverEvent.type in receivedMessages) {\n            receivedMessages[\n              serverEvent.type as keyof typeof receivedMessages\n            ]++\n          }\n        }\n      } catch (err) {\n        if (err instanceof TaskAbortError) {\n          // could do something here to track that the task was cancelled\n        }\n      }\n    })\n\n    // Wait for the \"stop polling\" action\n    await listenerApi.condition(eventPollingStopped.match)\n    pollingTask.cancel()\n  },\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adding-listeners-inside-components",children:"Adding Listeners Inside Components"}),"\n",(0,i.jsxs)(n.p,{children:["Listeners can be added at runtime via ",(0,i.jsx)(n.code,{children:"dispatch(addListener())"}),". This means that you can add listeners anywhere you have access to ",(0,i.jsx)(n.code,{children:"dispatch"}),", and that includes React components."]}),"\n",(0,i.jsxs)(n.p,{children:["Since dispatching ",(0,i.jsx)(n.code,{children:"addListener"})," returns an ",(0,i.jsx)(n.code,{children:"unsubscribe"})," callback, this naturally maps to the behavior of React ",(0,i.jsx)(n.code,{children:"useEffect"})," hooks, which let you return a cleanup function. You can add a listener in an effect, and remove the listener when the hook is cleaned up."]}),"\n",(0,i.jsx)(n.p,{children:"The basic pattern might look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"useEffect(() => {\n  // Could also just `return dispatch(addListener())` directly, but showing this\n  // as a separate variable to be clear on what's happening\n  const unsubscribe = dispatch(\n    addListener({\n      actionCreator: todoAdded,\n      effect: (action, listenerApi) => {\n        // do some useful logic here\n      },\n    }),\n  )\n  return unsubscribe\n}, [])\n"})}),"\n",(0,i.jsxs)(n.p,{children:["While this pattern is ",(0,i.jsx)(n.em,{children:"possible"}),", ",(0,i.jsxs)(n.strong,{children:["we do not necessarily ",(0,i.jsx)(n.em,{children:"recommend"})," doing this!"]})," The React and Redux communities have always tried to emphasize basing behavior on ",(0,i.jsx)(n.em,{children:"state"})," as much as possible. Having React components directly tie into the Redux action dispatch pipeline could potentialy lead to codebases that are more difficult to maintain."]}),"\n",(0,i.jsxs)(n.p,{children:["At the same time, this ",(0,i.jsx)(n.em,{children:"is"}),' a valid technique, both in terms of API behavior and potential use cases. It\'s been common to lazy-load sagas as part of a code-split app, and that has often required some complex additional setup work to "inject" sagas. In contrast, ',(0,i.jsx)(n.code,{children:"dispatch(addListener())"})," fits naturally into a React component's lifecycle."]}),"\n",(0,i.jsx)(n.p,{children:"So, while we're not specifically encouraging use of this pattern, it's worth documenting here so that users are aware of it as a possibility."}),"\n",(0,i.jsx)(n.h3,{id:"organizing-listeners-in-files",children:"Organizing Listeners in Files"}),"\n",(0,i.jsxs)(n.p,{children:["As a starting point, ",(0,i.jsxs)(n.strong,{children:["it's best to create the listener middleware in a separate file, such as ",(0,i.jsx)(n.code,{children:"app/listenerMiddleware.ts"}),", rather than in the same file as the store"]}),". This avoids any potential circular import problems from other files trying to import ",(0,i.jsx)(n.code,{children:"middleware.addListener"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"From there, so far we've come up with three different ways to organize listener functions and setup."}),"\n",(0,i.jsx)(n.p,{children:"First, you can import effect callbacks from slice files into the middleware file, and add the listeners:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'no-transpile title="app/listenerMiddleware.ts"',children:"import { action1, listener1 } from '../features/feature1/feature1Slice'\nimport { action2, listener2 } from '../features/feature2/feature2Slice'\n\nlistenerMiddleware.startListening({ actionCreator: action1, effect: listener1 })\nlistenerMiddleware.startListening({ actionCreator: action2, effect: listener2 })\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is probably the simplest option, and mirrors how the store setup pulls together all the slice reducers to create the app."}),"\n",(0,i.jsx)(n.p,{children:"The second option is the opposite: have the slice files import the middleware and directly add their listeners:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'no-transpile  title="features/feature1/feature1Slice.ts"',children:"import { listenerMiddleware } from '../../app/listenerMiddleware'\n\nconst feature1Slice = createSlice(/* */)\nconst { action1 } = feature1Slice.actions\n\nexport default feature1Slice.reducer\n\nlistenerMiddleware.startListening({\n  actionCreator: action1,\n  effect: () => {},\n})\n"})}),"\n",(0,i.jsx)(n.p,{children:"This keeps all the logic in the slice, although it does lock the setup into a single middleware instance."}),"\n",(0,i.jsx)(n.p,{children:"The third option is to create a setup function in the slice, but let the listener file call that on startup:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'no-transpile  title="features/feature1/feature1Slice.ts"',children:"import type { AppStartListening } from '../../app/listenerMiddleware'\n\nconst feature1Slice = createSlice(/* */)\nconst { action1 } = feature1Slice.actions\n\nexport default feature1Slice.reducer\n\nexport const addFeature1Listeners = (startListening: AppStartListening) => {\n  startListening({\n    actionCreator: action1,\n    effect: () => {},\n  })\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'no-transpile title="app/listenerMiddleware.ts"',children:"import { addFeature1Listeners } from '../features/feature1/feature1Slice'\n\naddFeature1Listeners(listenerMiddleware.startListening)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Feel free to use whichever of these approaches works best in your app."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);